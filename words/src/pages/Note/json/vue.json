[
    {
        "indexKey": 3,
        "lid": "55ee2240-00bd-4603-a22a-7ad89172b47b",
        "word": "<p><strong>File Repository Structure</strong></p><p><br></p><p>src</p><p>\t--assets</p><p>\t--components</p><p>\t--router</p><p>\t--stores</p><p>\t--views</p><p>\t--App.vue</p><p>\t--main.ts</p>",
        "tran": "",
        "en": "<p><strong>File Repository Structure</strong></p><p><br></p><p>src</p><p>\t--assets</p><p>\t--components</p><p>\t--router</p><p>\t--stores</p><p>\t--views</p><p>\t--App.vue</p><p>\t--main.ts</p>",
        "cn": ""
    },
    {
        "indexKey": 2,
        "lid": "6d86c6f8-baef-43a1-a960-1a2b00718045",
        "word": "<p><strong>Create a New Vue Application</strong></p><p><br></p><p>npm init vue@latest</p>",
        "tran": "",
        "en": "<p><strong>Create a New Vue Application</strong></p><p><br></p><p>npm init vue@latest</p>",
        "cn": ""
    },
    {
        "indexKey": 4,
        "lid": "9821ebff-a6d4-48ed-8d99-0ae55e37b011",
        "word": "<p><strong>Virtual DOM Under the Hood</strong></p><p><br></p><p>Browser rasterization process:</p><p>\t--Parser(HTML code and CSS stylesheets) </p><p>\t--DOM elements CSS rules(Style calculations per element) </p><p>\t--Plan screen layout(Reflow and repaint the page if any \"layout\" changes { layout (drawing visual elements) paint}) </p><p>\t--Onscreen drawing(Composite)</p><p><br></p><p><strong>The dom update direct has problem</strong></p><p>Since the DOM may consist of many nodes, querying and updating single or multiple nodes can be extremely expensive.</p>",
        "tran": "<p>Example to adding/removing a li element   in below html:</p><pre class=\"ql-syntax\" spellcheck=\"false\">    &lt;ul class=\"list\" id=\"todo-list\"&gt;\n        &lt;li class=\"list-item\"&gt;To do item 1&lt;/li&gt;\n        &lt;li class=\"list-item\"&gt;To do item 2&lt;/li&gt;\n        &lt;!--so on…--&gt;\n    &lt;/ul&gt;\n</pre><p>Adding/removing a li element or modifying its content requires querying the DOM for that item using <span style=\"color: rgb(230, 0, 0);\">document.getElementById</span> (or document.getElementsByClass Name). Then you need to perform the desired updates using the appropriate DOM APIs.</p><p><br></p><p>For instance, if you want to add a new item to the previous example, you need to do the following steps:</p><p>1. Query the containing list element by its id attribute’s value—\"todo-list\";</p><p>2. Add the new li element using document.createElement()</p><p>3. Set the textContent and the relevant attributes to match other element’s stan‐dard using setAttribute().</p><p>4. Append that element to the list element found in step 1 as its child using append Child():</p><pre class=\"ql-syntax\" spellcheck=\"false\">const list = document.getElementById('todo-list');\nconst newItem = document.createElement('li');\nnewItem.setAttribute('class', 'list-item');\nnewItem.textContent = 'To do item 3';\nlist.appendChild(newItem);\n</pre><p>If you want to change the text content of the 2nd li item to \"buy groceries\".You perform step 1 to get the containing list element,then query the target element using get getElementsByClassName(),and finally change its textContent to the new content:</p><pre class=\"ql-syntax\" spellcheck=\"false\">const secondItem = list.getElementsByClassName('list-item')[1];\nsecondItem.textContent = 'Buy groceries'\n</pre><p>Querying and updating the DOM on a small scale usually do not enormously impact performance. However, these actions can slow the page if performed more repeti‐tively (within a few seconds) and on a more complex web page.The performance impact is significant when there are consecutive minor updates.&nbsp;The Virtual DOM is designed to solve the layout update problem.</p>",
        "en": "<p><strong>Virtual DOM Under the Hood</strong></p><p><br></p><p>Browser rasterization process:</p><p>\t--Parser(HTML code and CSS stylesheets) </p><p>\t--DOM elements CSS rules(Style calculations per element) </p><p>\t--Plan screen layout(Reflow and repaint the page if any \"layout\" changes { layout (drawing visual elements) paint}) </p><p>\t--Onscreen drawing(Composite)</p><p><br></p><p><strong>The dom update direct has problem</strong></p><p>Since the DOM may consist of many nodes, querying and updating single or multiple nodes can be extremely expensive.</p>",
        "cn": "<p>Example to adding/removing a li element   in below html:</p><pre class=\"ql-syntax\" spellcheck=\"false\">    &lt;ul class=\"list\" id=\"todo-list\"&gt;\n        &lt;li class=\"list-item\"&gt;To do item 1&lt;/li&gt;\n        &lt;li class=\"list-item\"&gt;To do item 2&lt;/li&gt;\n        &lt;!--so on…--&gt;\n    &lt;/ul&gt;\n</pre><p>Adding/removing a li element or modifying its content requires querying the DOM for that item using <span style=\"color: rgb(230, 0, 0);\">document.getElementById</span> (or document.getElementsByClass Name). Then you need to perform the desired updates using the appropriate DOM APIs.</p><p><br></p><p>For instance, if you want to add a new item to the previous example, you need to do the following steps:</p><p>1. Query the containing list element by its id attribute’s value—\"todo-list\";</p><p>2. Add the new li element using document.createElement()</p><p>3. Set the textContent and the relevant attributes to match other element’s stan‐dard using setAttribute().</p><p>4. Append that element to the list element found in step 1 as its child using append Child():</p><pre class=\"ql-syntax\" spellcheck=\"false\">const list = document.getElementById('todo-list');\nconst newItem = document.createElement('li');\nnewItem.setAttribute('class', 'list-item');\nnewItem.textContent = 'To do item 3';\nlist.appendChild(newItem);\n</pre><p>If you want to change the text content of the 2nd li item to \"buy groceries\".You perform step 1 to get the containing list element,then query the target element using get getElementsByClassName(),and finally change its textContent to the new content:</p><pre class=\"ql-syntax\" spellcheck=\"false\">const secondItem = list.getElementsByClassName('list-item')[1];\nsecondItem.textContent = 'Buy groceries'\n</pre><p>Querying and updating the DOM on a small scale usually do not enormously impact performance. However, these actions can slow the page if performed more repeti‐tively (within a few seconds) and on a more complex web page.The performance impact is significant when there are consecutive minor updates.&nbsp;The Virtual DOM is designed to solve the layout update problem.</p>"
    },
    {
        "indexKey": 5,
        "lid": "b59119a1-bfe9-4c4e-9b3f-1a19e7acad51",
        "word": "<p><strong>What Is Virtual DOM?</strong></p><p><br></p><p>Virtual DOM is the in-memory virtual copy version of the actual DOM in the browser, but it is lighter weight and has extra functionalities. It mimics the real DOM struc‐ture, with a different data structure(usually Object).</p>",
        "tran": "<p>Behind the scenes, the Virtual DOM still uses the DOM API to construct and render updated elements in the browser. Thus, it still causes the browser’s repainting process,but more efficiently.</p><p><br></p><p>In short, Virtual DOM is an abstract pattern aiming to free the DOM from all the actions that can lead to performance inefficiencies, such as manipulating attributes,handling events, and manually updating DOM elements.</p>",
        "en": "<p><strong>What Is Virtual DOM?</strong></p><p><br></p><p>Virtual DOM is the in-memory virtual copy version of the actual DOM in the browser, but it is lighter weight and has extra functionalities. It mimics the real DOM struc‐ture, with a different data structure(usually Object).</p>",
        "cn": "<p>Behind the scenes, the Virtual DOM still uses the DOM API to construct and render updated elements in the browser. Thus, it still causes the browser’s repainting process,but more efficiently.</p><p><br></p><p>In short, Virtual DOM is an abstract pattern aiming to free the DOM from all the actions that can lead to performance inefficiencies, such as manipulating attributes,handling events, and manually updating DOM elements.</p>"
    },
    {
        "indexKey": 1,
        "lid": "df642763-27ec-4300-b196-a2acf9ae2899",
        "word": "<p><strong>update NPM version</strong></p><p><br></p><p>npm install npm@latest -g</p><p>install npm@6.13.4 -g</p><p><br></p><p><strong>npm i </strong>will create package-lock.json file to keep track of the package installed version.</p><p><br></p><p><strong>npm init -y  or npm init</strong></p><p><br></p><p><strong>yarn is similar</strong></p>",
        "tran": "",
        "en": "<p><strong>update NPM version</strong></p><p><br></p><p>npm install npm@latest -g</p><p>install npm@6.13.4 -g</p><p><br></p><p><strong>npm i </strong>will create package-lock.json file to keep track of the package installed version.</p><p><br></p><p><strong>npm init -y  or npm init</strong></p><p><br></p><p><strong>yarn is similar</strong></p>",
        "cn": ""
    }
]