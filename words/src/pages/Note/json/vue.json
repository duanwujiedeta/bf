[
    {
        "indexKey": 3,
        "lid": "55ee2240-00bd-4603-a22a-7ad89172b47b",
        "word": "<p><strong>File Repository Structure</strong></p><p><br></p><p>src</p><p>\t--assets</p><p>\t--components</p><p>\t--router</p><p>\t--stores</p><p>\t--views</p><p>\t--App.vue</p><p>\t--main.ts</p>",
        "tran": "",
        "en": "<p><strong>File Repository Structure</strong></p><p><br></p><p>src</p><p>\t--assets</p><p>\t--components</p><p>\t--router</p><p>\t--stores</p><p>\t--views</p><p>\t--App.vue</p><p>\t--main.ts</p>",
        "cn": ""
    },
    {
        "indexKey": 2,
        "lid": "6d86c6f8-baef-43a1-a960-1a2b00718045",
        "word": "<p><strong>Create a New Vue Application</strong></p><p><br></p><p>npm init vue@latest</p>",
        "tran": "",
        "en": "<p><strong>Create a New Vue Application</strong></p><p><br></p><p>npm init vue@latest</p>",
        "cn": ""
    },
    {
        "indexKey": 4,
        "lid": "9821ebff-a6d4-48ed-8d99-0ae55e37b011",
        "word": "<p><strong>Virtual DOM Under the Hood</strong></p><p><br></p><p>Browser rasterization process:</p><p>\t--Parser(HTML code and CSS stylesheets) </p><p>\t--DOM elements CSS rules(Style calculations per element) </p><p>\t--Plan screen layout(Reflow and repaint the page if any \"layout\" changes { layout (drawing visual elements) paint}) </p><p>\t--Onscreen drawing(Composite)</p><p><br></p><p><strong>The dom update direct has problem</strong></p><p>Since the DOM may consist of many nodes, querying and updating single or multiple nodes can be extremely expensive.</p>",
        "tran": "<p>Example to adding/removing a li element   in below html:</p><P class=\"ql-syntax\" spellcheck=\"false\">    &lt;ul class=\"list\" id=\"todo-list\"&gt;\n        &lt;li class=\"list-item\"&gt;To do item 1&lt;/li&gt;\n        &lt;li class=\"list-item\"&gt;To do item 2&lt;/li&gt;\n        &lt;!--so on…--&gt;\n    &lt;/ul&gt;\n</P><p>Adding/removing a li element or modifying its content requires querying the DOM for that item using <span style=\"color: rgb(230, 0, 0);\">document.getElementById</span> (or document.getElementsByClass Name). Then you need to perform the desired updates using the appropriate DOM APIs.</p><p><br></p><p>For instance, if you want to add a new item to the previous example, you need to do the following steps:</p><p>1. Query the containing list element by its id attribute’s value—\"todo-list\";</p><p>2. Add the new li element using document.createElement()</p><p>3. Set the textContent and the relevant attributes to match other element’s stan‐dard using setAttribute().</p><p>4. Append that element to the list element found in step 1 as its child using append Child():</p><P class=\"ql-syntax\" spellcheck=\"false\">const list = document.getElementById('todo-list');\nconst newItem = document.createElement('li');\nnewItem.setAttribute('class', 'list-item');\nnewItem.textContent = 'To do item 3';\nlist.appendChild(newItem);\n</P><p>If you want to change the text content of the 2nd li item to \"buy groceries\".You perform step 1 to get the containing list element,then query the target element using get getElementsByClassName(),and finally change its textContent to the new content:</p><P class=\"ql-syntax\" spellcheck=\"false\">const secondItem = list.getElementsByClassName('list-item')[1];\nsecondItem.textContent = 'Buy groceries'\n</P><p>Querying and updating the DOM on a small scale usually do not enormously impact performance. However, these actions can slow the page if performed more repeti‐tively (within a few seconds) and on a more complex web page.The performance impact is significant when there are consecutive minor updates.&nbsp;The Virtual DOM is designed to solve the layout update problem.</p>",
        "en": "<p><strong>Virtual DOM Under the Hood</strong></p><p><br></p><p>Browser rasterization process:</p><p>\t--Parser(HTML code and CSS stylesheets) </p><p>\t--DOM elements CSS rules(Style calculations per element) </p><p>\t--Plan screen layout(Reflow and repaint the page if any \"layout\" changes { layout (drawing visual elements) paint}) </p><p>\t--Onscreen drawing(Composite)</p><p><br></p><p><strong>The dom update direct has problem</strong></p><p>Since the DOM may consist of many nodes, querying and updating single or multiple nodes can be extremely expensive.</p>",
        "cn": "<p>Example to adding/removing a li element   in below html:</p><P class=\"ql-syntax\" spellcheck=\"false\">    &lt;ul class=\"list\" id=\"todo-list\"&gt;\n        &lt;li class=\"list-item\"&gt;To do item 1&lt;/li&gt;\n        &lt;li class=\"list-item\"&gt;To do item 2&lt;/li&gt;\n        &lt;!--so on…--&gt;\n    &lt;/ul&gt;\n</P><p>Adding/removing a li element or modifying its content requires querying the DOM for that item using <span style=\"color: rgb(230, 0, 0);\">document.getElementById</span> (or document.getElementsByClass Name). Then you need to perform the desired updates using the appropriate DOM APIs.</p><p><br></p><p>For instance, if you want to add a new item to the previous example, you need to do the following steps:</p><p>1. Query the containing list element by its id attribute’s value—\"todo-list\";</p><p>2. Add the new li element using document.createElement()</p><p>3. Set the textContent and the relevant attributes to match other element’s stan‐dard using setAttribute().</p><p>4. Append that element to the list element found in step 1 as its child using append Child():</p><P class=\"ql-syntax\" spellcheck=\"false\">const list = document.getElementById('todo-list');\nconst newItem = document.createElement('li');\nnewItem.setAttribute('class', 'list-item');\nnewItem.textContent = 'To do item 3';\nlist.appendChild(newItem);\n</P><p>If you want to change the text content of the 2nd li item to \"buy groceries\".You perform step 1 to get the containing list element,then query the target element using get getElementsByClassName(),and finally change its textContent to the new content:</p><P class=\"ql-syntax\" spellcheck=\"false\">const secondItem = list.getElementsByClassName('list-item')[1];\nsecondItem.textContent = 'Buy groceries'\n</P><p>Querying and updating the DOM on a small scale usually do not enormously impact performance. However, these actions can slow the page if performed more repeti‐tively (within a few seconds) and on a more complex web page.The performance impact is significant when there are consecutive minor updates.&nbsp;The Virtual DOM is designed to solve the layout update problem.</p>"
    },
    {
        "indexKey": 5,
        "lid": "b59119a1-bfe9-4c4e-9b3f-1a19e7acad51",
        "word": "<p><strong>What Is Virtual DOM?</strong></p><p><br></p><p>Virtual DOM is the in-memory virtual copy version of the actual DOM in the browser, but it is lighter weight and has extra functionalities. It mimics the real DOM struc‐ture, with a different data structure(usually Object).</p>",
        "tran": "<p>Behind the scenes, the Virtual DOM still uses the DOM API to construct and render updated elements in the browser. Thus, it still causes the browser’s repainting process,but more efficiently.</p><p><br></p><p>In short, Virtual DOM is an abstract pattern aiming to free the DOM from all the actions that can lead to performance inefficiencies, such as manipulating attributes,handling events, and manually updating DOM elements.</p>",
        "en": "<p><strong>What Is Virtual DOM?</strong></p><p><br></p><p>Virtual DOM is the in-memory virtual copy version of the actual DOM in the browser, but it is lighter weight and has extra functionalities. It mimics the real DOM struc‐ture, with a different data structure(usually Object).</p>",
        "cn": "<p>Behind the scenes, the Virtual DOM still uses the DOM API to construct and render updated elements in the browser. Thus, it still causes the browser’s repainting process,but more efficiently.</p><p><br></p><p>In short, Virtual DOM is an abstract pattern aiming to free the DOM from all the actions that can lead to performance inefficiencies, such as manipulating attributes,handling events, and manually updating DOM elements.</p>"
    },
    {
        "indexKey": 1,
        "lid": "df642763-27ec-4300-b196-a2acf9ae2899",
        "word": "<p><strong>update NPM version</strong></p><p><br></p><p>npm install npm@latest -g</p><p>install npm@6.13.4 -g</p><p><br></p><p><strong>npm i </strong>will create package-lock.json file to keep track of the package installed version.</p><p><br></p><p><strong>npm init -y  or npm init</strong></p><p><br></p><p><strong>yarn is similar</strong></p>",
        "tran": "",
        "en": "<p><strong>update NPM version</strong></p><p><br></p><p>npm install npm@latest -g</p><p>install npm@6.13.4 -g</p><p><br></p><p><strong>npm i </strong>will create package-lock.json file to keep track of the package installed version.</p><p><br></p><p><strong>npm init -y  or npm init</strong></p><p><br></p><p><strong>yarn is similar</strong></p>",
        "cn": ""
    },
    {
        "indexKey": 6,
        "lid": "32d14134-9722-40b2-8cdf-19121a9ff130",
        "word": "<p><strong>How Virtual DOM Works in Vue</strong></p><p>a virtual dom look like</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">node</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">tag:</span> <span style=\"color: rgb(206, 145, 120);\">'div'</span>,</p><p>    <span style=\"color: rgb(156, 220, 254);\">attributes:</span> [{ <span style=\"color: rgb(156, 220, 254);\">id:</span> <span style=\"color: rgb(206, 145, 120);\">'list-container'</span>, <span style=\"color: rgb(156, 220, 254);\">class:</span> <span style=\"color: rgb(206, 145, 120);\">'list-container'</span> }],</p><p>    <span style=\"color: rgb(156, 220, 254);\">children:</span> [ <span style=\"color: rgb(124, 166, 104);\">/* an array of nodes */</span>]</p><p>}</p><p>VNode is a virtual node that resides within the Virtual DOM and represents the actual DOM element in the real DOM.</p><p><br></p><p>Through UI interactions, the user tells Vue what state they wish the element to be in;Vue then triggers the Virtual DOM to update that element’s represented object (node) to the desired shape while keeping track of those changes. Finally, it communicates with the actual DOM and performs accurate updates on the changed nodes accordingly.</p><p><br></p><p>Since the Virtual DOM is a tree of custom JavaScript objects, updating a component equals updating a custom JavaScript object. This process doesn’t take long. Because we don’t call any DOM API, this update action doesn’t cause a DOM repainting.</p><p><br></p><p>Once the Virtual DOM finishes updating itself, it syncs in batch with the actual DOM, leading the changes to be reflected on the browser.</p>",
        "tran": "",
        "en": "<p><strong>How Virtual DOM Works in Vue</strong></p><p>a virtual dom look like</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">node</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">tag:</span> <span style=\"color: rgb(206, 145, 120);\">'div'</span>,</p><p>    <span style=\"color: rgb(156, 220, 254);\">attributes:</span> [{ <span style=\"color: rgb(156, 220, 254);\">id:</span> <span style=\"color: rgb(206, 145, 120);\">'list-container'</span>, <span style=\"color: rgb(156, 220, 254);\">class:</span> <span style=\"color: rgb(206, 145, 120);\">'list-container'</span> }],</p><p>    <span style=\"color: rgb(156, 220, 254);\">children:</span> [ <span style=\"color: rgb(124, 166, 104);\">/* an array of nodes */</span>]</p><p>}</p><p>VNode is a virtual node that resides within the Virtual DOM and represents the actual DOM element in the real DOM.</p><p><br></p><p>Through UI interactions, the user tells Vue what state they wish the element to be in;Vue then triggers the Virtual DOM to update that element’s represented object (node) to the desired shape while keeping track of those changes. Finally, it communicates with the actual DOM and performs accurate updates on the changed nodes accordingly.</p><p><br></p><p>Since the Virtual DOM is a tree of custom JavaScript objects, updating a component equals updating a custom JavaScript object. This process doesn’t take long. Because we don’t call any DOM API, this update action doesn’t cause a DOM repainting.</p><p><br></p><p>Once the Virtual DOM finishes updating itself, it syncs in batch with the actual DOM, leading the changes to be reflected on the browser.</p>",
        "cn": ""
    },
    {
        "indexKey": 8,
        "lid": "35c64901-6ec4-49bd-8121-2f3504fcc627",
        "word": "<p><strong>The Template Syntax</strong></p><p><br></p><p>single div display</p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">\"&lt;div&gt;This is the app's entrance&lt;/div&gt;\"</span>,</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p><p><br></p><p>multi-level html template,use backtick characters</p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;h1&gt;This is the app's entrance&lt;/h1&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;h2&gt;We are exploring template syntax&lt;/h2&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">`</span>,</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>",
        "tran": "",
        "en": "<p><strong>The Template Syntax</strong></p><p><br></p><p>single div display</p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">\"&lt;div&gt;This is the app's entrance&lt;/div&gt;\"</span>,</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p><p><br></p><p>multi-level html template,use backtick characters</p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;h1&gt;This is the app's entrance&lt;/h1&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;h2&gt;We are exploring template syntax&lt;/h2&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">`</span>,</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>",
        "cn": ""
    },
    {
        "indexKey": 19,
        "lid": "39cf10e0-9254-4538-b05a-4123ad4ac0ea",
        "word": "<p>v-for the key.A key should be a string or numeric value. An object or array is not a valid key to use.</p>",
        "tran": "",
        "en": "<p>v-for the key.A key should be a string or numeric value. An object or array is not a valid key to use.</p>",
        "cn": ""
    },
    {
        "indexKey": 15,
        "lid": "6464afe4-de0e-4470-9fd1-18ceba8ddf54",
        "word": "<p><strong>Binding Reactive Data and Passing Props Data with v-bind</strong></p><p><br></p><p>v-bind:&lt;attribute&gt;=\"&lt;expression&gt;\"</p><p>:&lt;attribute&gt;=\"&lt;expression&gt;\"</p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createVue</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;img :src=\"imageSrc\" /&gt;`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>() {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">imageSrc:</span> <span style=\"color: rgb(206, 145, 120);\">\"https://res.cloudinary.com/mayashavin/image/upload/TheCute%20Cat\"</span></p><p>        }</p><p>    }</p><p>}</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p><p><br></p><p><strong>v-bind with and object</strong></p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createVue</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;img v-bind=\"image\" /&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>() {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">image:</span> {</p><p>                <span style=\"color: rgb(156, 220, 254);\">src:</span> <span style=\"color: rgb(206, 145, 120);\">\"https://res.cloudinary.com/mayashavin/image/upload/TheCute%20Cat\"</span>,</p><p>                <span style=\"color: rgb(156, 220, 254);\">alt:</span> <span style=\"color: rgb(206, 145, 120);\">\"A random cute cate image\"</span></p><p>            }</p><p>        }</p><p>    }</p><p>}</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>",
        "tran": "",
        "en": "<p><strong>Binding Reactive Data and Passing Props Data with v-bind</strong></p><p><br></p><p>v-bind:&lt;attribute&gt;=\"&lt;expression&gt;\"</p><p>:&lt;attribute&gt;=\"&lt;expression&gt;\"</p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createVue</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;img :src=\"imageSrc\" /&gt;`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>() {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">imageSrc:</span> <span style=\"color: rgb(206, 145, 120);\">\"https://res.cloudinary.com/mayashavin/image/upload/TheCute%20Cat\"</span></p><p>        }</p><p>    }</p><p>}</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p><p><br></p><p><strong>v-bind with and object</strong></p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createVue</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;img v-bind=\"image\" /&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>() {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">image:</span> {</p><p>                <span style=\"color: rgb(156, 220, 254);\">src:</span> <span style=\"color: rgb(206, 145, 120);\">\"https://res.cloudinary.com/mayashavin/image/upload/TheCute%20Cat\"</span>,</p><p>                <span style=\"color: rgb(156, 220, 254);\">alt:</span> <span style=\"color: rgb(206, 145, 120);\">\"A random cute cate image\"</span></p><p>            }</p><p>        }</p><p>    }</p><p>}</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>",
        "cn": ""
    },
    {
        "indexKey": 9,
        "lid": "7505207f-d286-4c9f-8d44-858c39c5a586",
        "word": "<p><strong>Local State with Data Properties</strong></p><p><br></p><p><span class=\"ql-cursor\">﻿</span><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><span style=\"color: rgb(86, 156, 214);\">type</span> <span style=\"color: rgb(78, 201, 176);\">Data</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">title</span><span style=\"color: rgb(212, 212, 212);\">:</span> <span style=\"color: rgb(78, 201, 176);\">string</span>;</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;div&gt;{{ title }}&lt;/div&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>()<span style=\"color: rgb(212, 212, 212);\">:</span> <span style=\"color: rgb(78, 201, 176);\">Data</span> {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">title:</span> <span style=\"color: rgb(206, 145, 120);\">'My first Vue component'</span></p><p>        }</p><p>    }</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>",
        "tran": "<p><strong>this around the component</strong></p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span>, <span style=\"color: rgb(197, 134, 192);\">type</span> <span style=\"color: rgb(156, 220, 254);\">ComponentOptions</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(124, 166, 104);\">/**... */</span></p><p>    <span style=\"color: rgb(220, 220, 170);\">created</span>() {</p><p>        <span style=\"color: rgb(156, 220, 254);\">console</span>.<span style=\"color: rgb(220, 220, 170);\">log</span>((<span style=\"color: rgb(86, 156, 214);\">this</span> <span style=\"color: rgb(197, 134, 192);\">as</span> <span style=\"color: rgb(78, 201, 176);\">ComponentOptions</span>&lt;<span style=\"color: rgb(78, 201, 176);\">Data</span>&gt;).<span style=\"color: rgb(156, 220, 254);\">title</span>)</p><p>    }</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>",
        "en": "<p><strong>Local State with Data Properties</strong></p><p><br></p><p><span class=\"ql-cursor\">﻿</span><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><span style=\"color: rgb(86, 156, 214);\">type</span> <span style=\"color: rgb(78, 201, 176);\">Data</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">title</span><span style=\"color: rgb(212, 212, 212);\">:</span> <span style=\"color: rgb(78, 201, 176);\">string</span>;</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;div&gt;{{ title }}&lt;/div&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>()<span style=\"color: rgb(212, 212, 212);\">:</span> <span style=\"color: rgb(78, 201, 176);\">Data</span> {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">title:</span> <span style=\"color: rgb(206, 145, 120);\">'My first Vue component'</span></p><p>        }</p><p>    }</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>",
        "cn": "<p><strong>this around the component</strong></p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span>, <span style=\"color: rgb(197, 134, 192);\">type</span> <span style=\"color: rgb(156, 220, 254);\">ComponentOptions</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(124, 166, 104);\">/**... */</span></p><p>    <span style=\"color: rgb(220, 220, 170);\">created</span>() {</p><p>        <span style=\"color: rgb(156, 220, 254);\">console</span>.<span style=\"color: rgb(220, 220, 170);\">log</span>((<span style=\"color: rgb(86, 156, 214);\">this</span> <span style=\"color: rgb(197, 134, 192);\">as</span> <span style=\"color: rgb(78, 201, 176);\">ComponentOptions</span>&lt;<span style=\"color: rgb(78, 201, 176);\">Data</span>&gt;).<span style=\"color: rgb(156, 220, 254);\">title</span>)</p><p>    }</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>"
    },
    {
        "indexKey": 13,
        "lid": "79dbab90-9095-42c2-88ec-cf8ac4a2077e",
        "word": "<p>bind checklist</p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">CourseChecklist</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;div&gt;The course checklist: {{list.join(', ')}}&lt;/div&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;div&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;label for=\"chapter1\"&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;input</span></p><p><span style=\"color: rgb(206, 145, 120);\">v-model=\"list\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">type=\"checkbox\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">value=\"chapter01\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">id=\"chapter1\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">Chapter 1</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;/label&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;label for=\"chapter2\"&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;input</span></p><p><span style=\"color: rgb(206, 145, 120);\">v-model=\"list\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">type=\"checkbox\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">value=\"chapter02\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">id=\"chapter2\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">Chapter 2</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;/label&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;label for=\"chapter3\"&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;input</span></p><p><span style=\"color: rgb(206, 145, 120);\">v-model=\"list\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">type=\"checkbox\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">value=\"chapter03\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">id=\"chapter3\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">Chapter 3</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;/label&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;/div&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>() {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">list:</span> [],</p><p>        }</p><p>    }</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>({</p><p>    <span style=\"color: rgb(156, 220, 254);\">components:</span> { <span style=\"color: rgb(156, 220, 254);\">CourseChecklist</span> },</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`&lt;CourseChecklist /&gt;`</span>,</p><p>})</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>",
        "tran": "",
        "en": "<p>bind checklist</p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">CourseChecklist</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;div&gt;The course checklist: {{list.join(', ')}}&lt;/div&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;div&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;label for=\"chapter1\"&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;input</span></p><p><span style=\"color: rgb(206, 145, 120);\">v-model=\"list\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">type=\"checkbox\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">value=\"chapter01\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">id=\"chapter1\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">Chapter 1</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;/label&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;label for=\"chapter2\"&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;input</span></p><p><span style=\"color: rgb(206, 145, 120);\">v-model=\"list\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">type=\"checkbox\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">value=\"chapter02\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">id=\"chapter2\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">Chapter 2</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;/label&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;label for=\"chapter3\"&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;input</span></p><p><span style=\"color: rgb(206, 145, 120);\">v-model=\"list\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">type=\"checkbox\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">value=\"chapter03\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">id=\"chapter3\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">Chapter 3</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;/label&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;/div&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>() {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">list:</span> [],</p><p>        }</p><p>    }</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>({</p><p>    <span style=\"color: rgb(156, 220, 254);\">components:</span> { <span style=\"color: rgb(156, 220, 254);\">CourseChecklist</span> },</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`&lt;CourseChecklist /&gt;`</span>,</p><p>})</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>",
        "cn": ""
    },
    {
        "indexKey": 7,
        "lid": "824bded3-a57f-4045-87bf-8207658f2666",
        "word": "<p><strong>The Vue App Instance and Options API</strong></p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(124, 166, 104);\">//component's options</span></p><p>}</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p><p><br></p><p>using the createApp() method from the vue package. This change in functionality enhances the isolation of each Vue instance created both on dependencies and shared components (if any) and the code readability:</p><p><br></p><p><strong>Vue simple usage</strong></p><p>example one(template)</p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">\"This is the app's entrance\"</span>,</p><p>}</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p><p><br></p><p>example two(renter)</p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(220, 220, 170);\">render</span>() {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> <span style=\"color: rgb(206, 145, 120);\">\"This is the app's entrance\"</span></p><p>    }</p><p>}</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p><p><br></p><p>example three(use component)</p><p></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">Description</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">\"This is the app's entrance\"</span></p><p>};</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">components:</span> { <span style=\"color: rgb(156, 220, 254);\">Description</span> },</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">'&lt;Description /&gt;'</span></p><p>}</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>",
        "tran": "",
        "en": "<p><strong>The Vue App Instance and Options API</strong></p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(124, 166, 104);\">//component's options</span></p><p>}</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p><p><br></p><p>using the createApp() method from the vue package. This change in functionality enhances the isolation of each Vue instance created both on dependencies and shared components (if any) and the code readability:</p><p><br></p><p><strong>Vue simple usage</strong></p><p>example one(template)</p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">\"This is the app's entrance\"</span>,</p><p>}</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p><p><br></p><p><br></p><p><br></p><p>example one(renter)</p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(220, 220, 170);\">render</span>() {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> <span style=\"color: rgb(206, 145, 120);\">\"This is the app's entrance\"</span></p><p>    }</p><p>}</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p><p><br></p><p><br></p><p>example one(use component)</p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">Description</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">\"This is the app's entrance\"</span></p><p>};</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">components:</span> { <span style=\"color: rgb(156, 220, 254);\">Description</span> },</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">'&lt;Description /&gt;'</span></p><p>}</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>",
        "cn": ""
    },
    {
        "indexKey": 18,
        "lid": "9ec17eac-33cb-4b84-a845-1c8e67011b2c",
        "word": "<p><strong>Iterating Through Object Properties</strong></p><p><br></p><p>v-for = \"(value, name) in collection\"</p><p><br></p><p>import { createApp } from 'vue'</p><p>const Collection = {</p><p>&nbsp;&nbsp;data() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;collection: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title: 'Watch Moonknight',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description: 'Log in to Disney+ and watch all the chapters',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;priority: '5'</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;template: `</p><p>&lt;ul&gt;</p><p>&lt;li <strong>v-for=\"(value, name) in collection\" :key=\"name\"</strong>&gt;</p><p><strong>{{name}}: {{value}}</strong></p><p>&lt;/li&gt;</p><p>&lt;/ul&gt;</p><p>`,</p><p>}</p><p>const app = createApp({</p><p>&nbsp;&nbsp;components: { Collection },</p><p>&nbsp;&nbsp;template: `&lt;Collection /&gt;`</p><p>})</p><p>app.mount('#app')</p><p><br></p><p>object v-for with index</p><p>v-for = “(value, name, index) in collection”</p>",
        "tran": "",
        "en": "<p><strong>Iterating Through Object Properties</strong></p><p><br></p><p>v-for = \"(value, name) in collection\"</p><p><br></p><p>import { createApp } from 'vue'</p><p>const Collection = {</p><p>&nbsp;&nbsp;data() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;collection: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title: 'Watch Moonknight',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description: 'Log in to Disney+ and watch all the chapters',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;priority: '5'</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;template: `</p><p>&lt;ul&gt;</p><p>&lt;li <strong>v-for=\"(value, name) in collection\" :key=\"name\"</strong>&gt;</p><p><strong>{{name}}: {{value}}</strong></p><p>&lt;/li&gt;</p><p>&lt;/ul&gt;</p><p>`,</p><p>}</p><p>const app = createApp({</p><p>&nbsp;&nbsp;components: { Collection },</p><p>&nbsp;&nbsp;template: `&lt;Collection /&gt;`</p><p>})</p><p>app.mount('#app')</p><p><br></p><p>object v-for with index</p><p>v-for = “(value, name, index) in collection”</p>",
        "cn": ""
    },
    {
        "indexKey": 20,
        "lid": "a60cc296-7b4f-43a6-90f4-9cd161309458",
        "word": "<p><strong>Adding Event Listener to Elements with v-on</strong></p><p><br></p><p>v-on:&lt;event&gt;= “&lt;inline JavaScript code / name of method&gt;”</p><p>@&lt;event&gt;=”&lt;inline JavaScript code / name of method&gt;”</p>",
        "tran": "<p><br></p><p>import { createApp, type ComponentOptions } from 'vue'</p><p>type Data = {</p><p>&nbsp;&nbsp;printMsg: string;</p><p>}</p><p>const App = {</p><p>&nbsp;&nbsp;template: `</p><p>&lt;button @click=\"printMessage\"&gt;Click me&lt;/button&gt;</p><p>&lt;div&gt;{{ printMsg }}&lt;/div&gt;</p><p>`,</p><p>&nbsp;&nbsp;methods: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;printMessage() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(this as ComponentOptions&lt;Data&gt;).printMsg = \"Button is clicked!\"</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;data(): Data {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printMsg: \"Nothing to print yet!\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;}</p><p>}</p><p>const app = createApp(App)</p><p>app.mount(\"#app\");</p>",
        "en": "<p><strong>Adding Event Listener to Elements with v-on</strong></p><p><br></p><p>v-on:&lt;event&gt;= “&lt;inline JavaScript code / name of method&gt;”</p><p>@&lt;event&gt;=”&lt;inline JavaScript code / name of method&gt;”</p>",
        "cn": "<p><br></p><p>import { createApp, type ComponentOptions } from 'vue'</p><p>type Data = {</p><p>&nbsp;&nbsp;printMsg: string;</p><p>}</p><p>const App = {</p><p>&nbsp;&nbsp;template: `</p><p>&lt;button @click=\"printMessage\"&gt;Click me&lt;/button&gt;</p><p>&lt;div&gt;{{ printMsg }}&lt;/div&gt;</p><p>`,</p><p>&nbsp;&nbsp;methods: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;printMessage() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(this as ComponentOptions&lt;Data&gt;).printMsg = \"Button is clicked!\"</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;data(): Data {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printMsg: \"Nothing to print yet!\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;}</p><p>}</p><p>const app = createApp(App)</p><p>app.mount(\"#app\");</p>"
    },
    {
        "indexKey": 16,
        "lid": "a8ddc745-094c-4520-b153-db76874d4b3c",
        "word": "<p><strong>Binding to Class and Style Attributes</strong></p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createVue</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;img v-bind=\"image\" /&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>() {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">image:</span> {</p><p>                <span style=\"color: rgb(156, 220, 254);\">src:</span> <span style=\"color: rgb(206, 145, 120);\">\"https://res.cloudinary.com/mayashavin/image/upload/TheCute%20Cat\"</span>,</p><p>                <span style=\"color: rgb(156, 220, 254);\">alt:</span> <span style=\"color: rgb(206, 145, 120);\">\"A random cute cate image\"</span>,</p><p>                <strong style=\"color: rgb(156, 220, 254);\">class:</strong><strong> [</strong><strong style=\"color: rgb(206, 145, 120);\">\"cat\"</strong><strong>, </strong><strong style=\"color: rgb(206, 145, 120);\">\"image\"</strong><strong>]</strong></p><p>            }</p><p>        }</p><p>    }</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p><p><br></p><p><br></p>",
        "tran": "<p>import { createVue } from 'vue'</p><p>const isVisible = true;</p><p>const App = {</p><p>&nbsp;&nbsp;template: `</p><p>&lt;img <strong>v-bind=\"image\"</strong> /&gt;</p><p>`,</p><p>&nbsp;&nbsp;data() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;src: \"https://res.cloudinary.com/mayashavin/image/upload/TheCute%20Cat\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alt: \"A random cute cate image\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>cat: isVisible,</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image: !isVisible</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;}</p><p>}</p><p>const app = createApp(App)</p><p>app.mount('#app')</p><p><br></p><p><br></p><p>style</p><p><br></p><p>import { createVue } from 'vue'</p><p>const App = {</p><p>&nbsp;&nbsp;template: `</p><p>&lt;img v-bind=\"image\" /&gt;</p><p>`,</p><p>&nbsp;&nbsp;data() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;src: \"https://res.cloudinary.com/mayashavin/image/upload/TheCute%20Cat\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alt: \"A random cute cate image\",</p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style: {</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginBlock: '10px',</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginInline: '15px'</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;}</p><p>}</p><p>const app = createApp(App)</p><p>app.mount('#app')</p><p><br></p><p><br></p><p>import { createVue } from 'vue'</p><p>const App = {</p><p>&nbsp;&nbsp;template: `</p><p>&lt;img v-bind=\"image\" /&gt;</p><p>`,</p><p>&nbsp;&nbsp;data() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;src: \"https://res.cloudinary.com/mayashavin/image/upload/TheCute%20Cat\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alt: \"A random cute cate image\",</p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style: [{</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginBlock: \"10px\",</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginInline: \"15px\"</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, {</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding: \"10px\"</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}]</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;}</p><p>}</p><p>const app = createApp(App)</p><p>app.mount('#app')</p>",
        "en": "<p><strong>Binding to Class and Style Attributes</strong></p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createVue</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;img v-bind=\"image\" /&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>() {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">image:</span> {</p><p>                <span style=\"color: rgb(156, 220, 254);\">src:</span> <span style=\"color: rgb(206, 145, 120);\">\"https://res.cloudinary.com/mayashavin/image/upload/TheCute%20Cat\"</span>,</p><p>                <span style=\"color: rgb(156, 220, 254);\">alt:</span> <span style=\"color: rgb(206, 145, 120);\">\"A random cute cate image\"</span>,</p><p>                <strong style=\"color: rgb(156, 220, 254);\">class:</strong><strong> [</strong><strong style=\"color: rgb(206, 145, 120);\">\"cat\"</strong><strong>, </strong><strong style=\"color: rgb(206, 145, 120);\">\"image\"</strong><strong>]</strong></p><p>            }</p><p>        }</p><p>    }</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p><p><br></p><p><br></p>",
        "cn": "<p>import { createVue } from 'vue'</p><p>const isVisible = true;</p><p>const App = {</p><p>&nbsp;&nbsp;template: `</p><p>&lt;img <strong>v-bind=\"image\"</strong> /&gt;</p><p>`,</p><p>&nbsp;&nbsp;data() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;src: \"https://res.cloudinary.com/mayashavin/image/upload/TheCute%20Cat\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alt: \"A random cute cate image\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>cat: isVisible,</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image: !isVisible</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;}</p><p>}</p><p>const app = createApp(App)</p><p>app.mount('#app')</p><p><br></p><p><br></p><p>style</p><p><br></p><p>import { createVue } from 'vue'</p><p>const App = {</p><p>&nbsp;&nbsp;template: `</p><p>&lt;img v-bind=\"image\" /&gt;</p><p>`,</p><p>&nbsp;&nbsp;data() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;src: \"https://res.cloudinary.com/mayashavin/image/upload/TheCute%20Cat\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alt: \"A random cute cate image\",</p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style: {</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginBlock: '10px',</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginInline: '15px'</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;}</p><p>}</p><p>const app = createApp(App)</p><p>app.mount('#app')</p><p><br></p><p><br></p><p>import { createVue } from 'vue'</p><p>const App = {</p><p>&nbsp;&nbsp;template: `</p><p>&lt;img v-bind=\"image\" /&gt;</p><p>`,</p><p>&nbsp;&nbsp;data() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;src: \"https://res.cloudinary.com/mayashavin/image/upload/TheCute%20Cat\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alt: \"A random cute cate image\",</p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style: [{</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginBlock: \"10px\",</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;marginInline: \"15px\"</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, {</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding: \"10px\"</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}]</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;}</p><p>}</p><p>const app = createApp(App)</p><p>app.mount('#app')</p>"
    },
    {
        "indexKey": 21,
        "lid": "a9069149-01f3-4d1e-a0af-c4d5aed910ca",
        "word": "<p><strong>stopPropagation()</strong></p><p><br></p><p>const App = {</p><p>&nbsp;&nbsp;template: `</p><p>&nbsp;&nbsp;&lt;button @click=\"printMessage\"&gt;Click me&lt;/button&gt;</p><p>&nbsp;&nbsp;`,</p><p>&nbsp;&nbsp;methods: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;printMessage(e: Event) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>e.stopPropagation()</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Button is clicked!\")</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;},</p><p>}</p>",
        "tran": "<p><br></p><p>const App = {</p><p>&nbsp;&nbsp;template: `</p><p>&nbsp;&nbsp;&lt;button <strong>@click.stop=\"printMessage\"</strong>&gt;Click me&lt;/button&gt;</p><p>&nbsp;&nbsp;`,</p><p>&nbsp;&nbsp;methods: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;printMessage() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Button is clicked!\")</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;},</p><p>}</p><p><br></p><p>@click.stop.prevent  is include the event.preventDefault().</p>",
        "en": "<p><strong>stopPropagation()</strong></p><p><br></p><p>const App = {</p><p>&nbsp;&nbsp;template: `</p><p>&nbsp;&nbsp;&lt;button @click=\"printMessage\"&gt;Click me&lt;/button&gt;</p><p>&nbsp;&nbsp;`,</p><p>&nbsp;&nbsp;methods: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;printMessage(e: Event) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e) {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>e.stopPropagation()</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Button is clicked!\")</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;},</p><p>}</p>",
        "cn": "<p><br></p><p>const App = {</p><p>&nbsp;&nbsp;template: `</p><p>&nbsp;&nbsp;&lt;button <strong>@click.stop=\"printMessage\"</strong>&gt;Click me&lt;/button&gt;</p><p>&nbsp;&nbsp;`,</p><p>&nbsp;&nbsp;methods: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;printMessage() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Button is clicked!\")</p><p>&nbsp;&nbsp;&nbsp;&nbsp;}</p><p>&nbsp;&nbsp;},</p><p>}</p><p><br></p><p>@click.stop.prevent  is include the event.preventDefault().</p>"
    },
    {
        "indexKey": 11,
        "lid": "9c6b7614-48d2-4146-8e1b-dc3a6a7d5395",
        "word": "<p><strong>How Reactivity in Vue Works</strong></p><p><br></p><p>1、在Vue.js 2.0中，定义本地数据后，内部Vue引擎使用JavaScript的Object.defineProperty()来为每个相关的数据建立getter和setter，实现相关数据的响应性。而在Vue.js 3.0中，为了提升性能，Vue引擎采用了基于ES5 Proxy的机制，将运行时性能翻倍，并将所需内存减少一半。我们将在第三章详细解释这个响应式机制。</p><p><br></p><p>2、在设置响应式机制之后，Vue引擎使用观察者对象来跟踪由setter触发的任何数据更新。观察者帮助Vue引擎检测变化，并通过队列系统更新虚拟DOM和实际DOM。</p><p><br></p><p>3、Vue使用队列系统来避免在短时间内对DOM进行低效的多次更新。观察者在相关组件数据更改时将自己添加到队列中。Vue引擎根据特定顺序对其进行排序以进行消耗。直到Vue引擎完成消费并从队列中刷新该观察者，无论数据更改的次数如何，该组件内部队列中只存在一个观察者。这个消费过程由nextTick() API完成，它是一个Vue函数。</p><p><br></p><p>4、最后，在Vue引擎消耗和刷新所有观察者后，它触发每个观察者的run()函数，自动更新组件的实际DOM和虚拟DOM，应用程序渲染完成。</p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span>, <span style=\"color: rgb(197, 134, 192);\">type</span> <span style=\"color: rgb(156, 220, 254);\">ComponentOptions</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">type</span> <span style=\"color: rgb(78, 201, 176);\">Data</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">counter</span><span style=\"color: rgb(212, 212, 212);\">:</span> <span style=\"color: rgb(78, 201, 176);\">number</span>;</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;div&gt;Counter: {{ counter }}&lt;/div&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>()<span style=\"color: rgb(212, 212, 212);\">:</span> <span style=\"color: rgb(78, 201, 176);\">Data</span> {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">counter:</span> <span style=\"color: rgb(181, 206, 168);\">0</span></p><p>        }</p><p>    },</p><p>    <span style=\"color: rgb(220, 220, 170);\">created</span>() {</p><p>        <span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">interval</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">setInterval</span>(() <span style=\"color: rgb(86, 156, 214);\">=&gt;</span> {</p><p>            (<span style=\"color: rgb(86, 156, 214);\">this</span> <span style=\"color: rgb(197, 134, 192);\">as</span> <span style=\"color: rgb(78, 201, 176);\">ComponentOptions</span>&lt;<span style=\"color: rgb(78, 201, 176);\">Data</span>&gt;).<span style=\"color: rgb(156, 220, 254);\">counter</span><span style=\"color: rgb(212, 212, 212);\">++</span></p><p>        }, <span style=\"color: rgb(181, 206, 168);\">1000</span>);</p><p>        <span style=\"color: rgb(220, 220, 170);\">setTimeout</span>(() <span style=\"color: rgb(86, 156, 214);\">=&gt;</span> {</p><p>            <span style=\"color: rgb(220, 220, 170);\">clearInterval</span>(<span style=\"color: rgb(156, 220, 254);\">interval</span>)</p><p>        }, <span style=\"color: rgb(181, 206, 168);\">5000</span>)</p><p>    }</p><p>}</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>",
        "tran": "",
        "en": "<p><strong>How Reactivity in Vue Works</strong></p><p><br></p><p>1、在Vue.js 2.0中，定义本地数据后，内部Vue引擎使用JavaScript的Object.defineProperty()来为每个相关的数据建立getter和setter，实现相关数据的响应性。而在Vue.js 3.0中，为了提升性能，Vue引擎采用了基于ES5 Proxy的机制，将运行时性能翻倍，并将所需内存减少一半。我们将在第三章详细解释这个响应式机制。</p><p><br></p><p>2、在设置响应式机制之后，Vue引擎使用观察者对象来跟踪由setter触发的任何数据更新。观察者帮助Vue引擎检测变化，并通过队列系统更新虚拟DOM和实际DOM。</p><p><br></p><p>3、Vue使用队列系统来避免在短时间内对DOM进行低效的多次更新。观察者在相关组件数据更改时将自己添加到队列中。Vue引擎根据特定顺序对其进行排序以进行消耗。直到Vue引擎完成消费并从队列中刷新该观察者，无论数据更改的次数如何，该组件内部队列中只存在一个观察者。这个消费过程由nextTick() API完成，它是一个Vue函数。</p><p><br></p><p>4、最后，在Vue引擎消耗和刷新所有观察者后，它触发每个观察者的run()函数，自动更新组件的实际DOM和虚拟DOM，应用程序渲染完成。</p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span>, <span style=\"color: rgb(197, 134, 192);\">type</span> <span style=\"color: rgb(156, 220, 254);\">ComponentOptions</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">type</span> <span style=\"color: rgb(78, 201, 176);\">Data</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">counter</span><span style=\"color: rgb(212, 212, 212);\">:</span> <span style=\"color: rgb(78, 201, 176);\">number</span>;</p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">&lt;div&gt;Counter: {{ counter }}&lt;/div&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>()<span style=\"color: rgb(212, 212, 212);\">:</span> <span style=\"color: rgb(78, 201, 176);\">Data</span> {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">counter:</span> <span style=\"color: rgb(181, 206, 168);\">0</span></p><p>        }</p><p>    },</p><p>    <span style=\"color: rgb(220, 220, 170);\">created</span>() {</p><p>        <span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">interval</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">setInterval</span>(() <span style=\"color: rgb(86, 156, 214);\">=&gt;</span> {</p><p>            (<span style=\"color: rgb(86, 156, 214);\">this</span> <span style=\"color: rgb(197, 134, 192);\">as</span> <span style=\"color: rgb(78, 201, 176);\">ComponentOptions</span>&lt;<span style=\"color: rgb(78, 201, 176);\">Data</span>&gt;).<span style=\"color: rgb(156, 220, 254);\">counter</span><span style=\"color: rgb(212, 212, 212);\">++</span></p><p>        }, <span style=\"color: rgb(181, 206, 168);\">1000</span>);</p><p>        <span style=\"color: rgb(220, 220, 170);\">setTimeout</span>(() <span style=\"color: rgb(86, 156, 214);\">=&gt;</span> {</p><p>            <span style=\"color: rgb(220, 220, 170);\">clearInterval</span>(<span style=\"color: rgb(156, 220, 254);\">interval</span>)</p><p>        }, <span style=\"color: rgb(181, 206, 168);\">5000</span>)</p><p>    }</p><p>}</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>(<span style=\"color: rgb(156, 220, 254);\">App</span>)</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>",
        "cn": ""
    },
    {
        "indexKey": 17,
        "lid": "b55ed5b1-dd50-410a-9b6c-287cc1bb603f",
        "word": "<p>Iterating over Data Collection Using <strong>v-for</strong></p><p><br></p><p>import { createApp } from 'vue'</p><p>const List = {</p><p>&nbsp;&nbsp;template: `</p><p>&lt;ul&gt;</p><p><strong>&lt;li v-for=\"number in numbers\" :key=\"number\"&gt;{{number}}&lt;/li&gt;</strong></p><p>&lt;/ul&gt;</p><p>`,</p><p>&nbsp;&nbsp;data() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numbers: [1, 2, 3, 4, 5]</p><p>&nbsp;&nbsp;&nbsp;&nbsp;};</p><p>&nbsp;&nbsp;}</p><p>};</p><p>const app = createApp({</p><p>&nbsp;&nbsp;components: { List },</p><p>&nbsp;&nbsp;template: `&lt;List /&gt;`</p><p>})</p><p>app.mount('#app')</p>",
        "tran": "<p>A unique key attribute for each iterated element. Vue uses this attribute to keep track of each element rendered for a later update.&nbsp;</p><p><br></p><p>v-for with index</p><p><br></p><p>import { createApp } from 'vue'</p><p>const List = {</p><p>&nbsp;&nbsp;template: `</p><p>&lt;ul&gt;</p><p>&lt;li <strong>v-for=\"(task, index) in tasks\"</strong> :key=\"task.id\"&gt;</p><p>{{title}} {{index}}: {{task.description}}&lt;/li&gt;</p><p>&lt;/ul&gt;</p><p>`,</p><p>&nbsp;&nbsp;//...</p><p>}</p>",
        "en": "<p>Iterating over Data Collection Using <strong>v-for</strong></p><p><br></p><p>import { createApp } from 'vue'</p><p>const List = {</p><p>&nbsp;&nbsp;template: `</p><p>&lt;ul&gt;</p><p><strong>&lt;li v-for=\"number in numbers\" :key=\"number\"&gt;{{number}}&lt;/li&gt;</strong></p><p>&lt;/ul&gt;</p><p>`,</p><p>&nbsp;&nbsp;data() {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;return {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numbers: [1, 2, 3, 4, 5]</p><p>&nbsp;&nbsp;&nbsp;&nbsp;};</p><p>&nbsp;&nbsp;}</p><p>};</p><p>const app = createApp({</p><p>&nbsp;&nbsp;components: { List },</p><p>&nbsp;&nbsp;template: `&lt;List /&gt;`</p><p>})</p><p>app.mount('#app')</p>",
        "cn": "<p>A unique key attribute for each iterated element. Vue uses this attribute to keep track of each element rendered for a later update.&nbsp;</p><p><br></p><p>v-for with index</p><p><br></p><p>import { createApp } from 'vue'</p><p>const List = {</p><p>&nbsp;&nbsp;template: `</p><p>&lt;ul&gt;</p><p>&lt;li <strong>v-for=\"(task, index) in tasks\"</strong> :key=\"task.id\"&gt;</p><p>{{title}} {{index}}: {{task.description}}&lt;/li&gt;</p><p>&lt;/ul&gt;</p><p>`,</p><p>&nbsp;&nbsp;//...</p><p>}</p>"
    },
    {
        "indexKey": 12,
        "lid": "ba601ce0-3f3e-49cb-a71b-af923e1c5185",
        "word": "<p><strong>Two-Way Binding with v-model</strong></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">NameInput</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">    &lt;label for=\"name\"&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">    Write your name:</span></p><p><span style=\"color: rgb(206, 145, 120);\">    &lt;input</span></p><p><span style=\"color: rgb(206, 145, 120);\">    v-model=\"name\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">    placeholder=\"Enter your name\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">    id=\"name\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">    &gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">    &lt;/label&gt;`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>() {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">name:</span> <span style=\"color: rgb(206, 145, 120);\">''</span>,</p><p>        }</p><p>    }</p><p>}</p>",
        "tran": "<p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">NameInput</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(124, 166, 104);\">/**... */</span></p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>({</p><p>    <span style=\"color: rgb(156, 220, 254);\">components:</span> { <span style=\"color: rgb(156, 220, 254);\">NameInput</span> },</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`&lt;NameInput /&gt;`</span>,</p><p>})</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>",
        "en": "<p><strong>Two-Way Binding with v-model</strong></p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">NameInput</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">    &lt;label for=\"name\"&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">    Write your name:</span></p><p><span style=\"color: rgb(206, 145, 120);\">    &lt;input</span></p><p><span style=\"color: rgb(206, 145, 120);\">    v-model=\"name\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">    placeholder=\"Enter your name\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">    id=\"name\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">    &gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">    &lt;/label&gt;`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>() {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">name:</span> <span style=\"color: rgb(206, 145, 120);\">''</span>,</p><p>        }</p><p>    }</p><p>}</p>",
        "cn": "<p><span style=\"color: rgb(197, 134, 192);\">import</span> { <span style=\"color: rgb(156, 220, 254);\">createApp</span> } <span style=\"color: rgb(197, 134, 192);\">from</span> <span style=\"color: rgb(206, 145, 120);\">'vue'</span></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">NameInput</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(124, 166, 104);\">/**... */</span></p><p>}</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">app</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">createApp</span>({</p><p>    <span style=\"color: rgb(156, 220, 254);\">components:</span> { <span style=\"color: rgb(156, 220, 254);\">NameInput</span> },</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`&lt;NameInput /&gt;`</span>,</p><p>})</p><p><span style=\"color: rgb(156, 220, 254);\">app</span>.<span style=\"color: rgb(220, 220, 170);\">mount</span>(<span style=\"color: rgb(206, 145, 120);\">'#app'</span>)</p>"
    },
    {
        "indexKey": 14,
        "lid": "eda5d2c4-c3d3-4959-b2d7-2eb7765b627f",
        "word": "<p><strong>Using v-model.lazy Modifier、v-model.number、v-model.trim</strong></p><p>This can potential unnecessary re-rendering.</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">NameInput</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">    &lt;label for=\"name\"&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">    Write your name:</span></p><p><span style=\"color: rgb(206, 145, 120);\">    &lt;input</span></p><p><span style=\"color: rgb(206, 145, 120);\">    v-model.lazy=\"name\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">    placeholder=\"Enter your name\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">    id=\"name\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">    &gt;&lt;/label&gt;`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>() {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">name:</span> <span style=\"color: rgb(206, 145, 120);\">''</span>,</p><p>        }</p><p>    }</p><p>}</p>",
        "tran": "",
        "en": "<p><strong>Using v-model.lazy Modifier、v-model.number、v-model.trim</strong></p><p>This can potential unnecessary re-rendering.</p><p><br></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">NameInput</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`</span></p><p><span style=\"color: rgb(206, 145, 120);\">    &lt;label for=\"name\"&gt;</span></p><p><span style=\"color: rgb(206, 145, 120);\">    Write your name:</span></p><p><span style=\"color: rgb(206, 145, 120);\">    &lt;input</span></p><p><span style=\"color: rgb(206, 145, 120);\">    v-model.lazy=\"name\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">    placeholder=\"Enter your name\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">    id=\"name\"</span></p><p><span style=\"color: rgb(206, 145, 120);\">    &gt;&lt;/label&gt;`</span>,</p><p>    <span style=\"color: rgb(220, 220, 170);\">data</span>() {</p><p>        <span style=\"color: rgb(197, 134, 192);\">return</span> {</p><p>            <span style=\"color: rgb(156, 220, 254);\">name:</span> <span style=\"color: rgb(206, 145, 120);\">''</span>,</p><p>        }</p><p>    }</p><p>}</p>",
        "cn": ""
    },
    {
        "indexKey": 10,
        "lid": "ff8835fa-619c-4bcc-9245-fa67a3cb17b1",
        "word": "<p>We cast this as a ComponentOptions&lt;Data&gt; type.</p>",
        "tran": "",
        "en": "<p>We cast this as a ComponentOptions&lt;Data&gt; type.</p>",
        "cn": ""
    },
    {
        "indexKey": 823,
        "lid": "2fbf3803-0a42-42d1-80f8-06053262772e",
        "word": "<p><strong>Detecting Keyboard Events with Key Code Modifiers</strong></p><p><br></p><p>keyCode 13</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`&lt;input @keydown=\"onEnter\" &gt;`</span>,</p><p>    <span style=\"color: rgb(156, 220, 254);\">methods:</span> {</p><p>        <span style=\"color: rgb(220, 220, 170);\">onEnter</span>(<span style=\"color: rgb(156, 220, 254);\">e</span><span style=\"color: rgb(212, 212, 212);\">:</span> <span style=\"color: rgb(78, 201, 176);\">KeyboardEvent</span>) {</p><p>            <span style=\"color: rgb(197, 134, 192);\">if</span> (<span style=\"color: rgb(156, 220, 254);\">e</span>.<span style=\"color: rgb(156, 220, 254);\">keyCode</span> <span style=\"color: rgb(212, 212, 212);\">===</span> <span style=\"color: rgb(206, 145, 120);\">'13'</span>) {</p><p>                <span style=\"color: rgb(156, 220, 254);\">console</span>.<span style=\"color: rgb(220, 220, 170);\">log</span>(<span style=\"color: rgb(206, 145, 120);\">'User pressed Enter!'</span>)</p><p>            }</p><p>            <span style=\"color: rgb(124, 166, 104);\">/*...*/</span></p><p><span style=\"color: rgb(86, 156, 214);\">        }</span></p><p><span style=\"color: rgb(86, 156, 214);\">    }</span></p><p><span style=\"color: rgb(86, 156, 214);\">}</span></p><p><br></p><p><br></p><p>@keydown.enter</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`&lt;input @keydown.enter=\"onEnter\" &gt;`</span>,</p><p>    <span style=\"color: rgb(156, 220, 254);\">methods:</span> {</p><p>        <span style=\"color: rgb(220, 220, 170);\">onEnter</span>(<span style=\"color: rgb(156, 220, 254);\">e</span><span style=\"color: rgb(212, 212, 212);\">:</span> <span style=\"color: rgb(78, 201, 176);\">KeyboardEvent</span>) {</p><p>            <span style=\"color: rgb(156, 220, 254);\">console</span>.<span style=\"color: rgb(220, 220, 170);\">log</span>(<span style=\"color: rgb(206, 145, 120);\">'User pressed Enter!'</span>)</p><p>            <span style=\"color: rgb(124, 166, 104);\">/*...*/</span></p><p>        }</p><p>    }</p><p>}</p>",
        "tran": "",
        "en": "<p><strong>Detecting Keyboard Events with Key Code Modifiers</strong></p><p><br></p><p>keyCode 13</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`&lt;input @keydown=\"onEnter\" &gt;`</span>,</p><p>    <span style=\"color: rgb(156, 220, 254);\">methods:</span> {</p><p>        <span style=\"color: rgb(220, 220, 170);\">onEnter</span>(<span style=\"color: rgb(156, 220, 254);\">e</span><span style=\"color: rgb(212, 212, 212);\">:</span> <span style=\"color: rgb(78, 201, 176);\">KeyboardEvent</span>) {</p><p>            <span style=\"color: rgb(197, 134, 192);\">if</span> (<span style=\"color: rgb(156, 220, 254);\">e</span>.<span style=\"color: rgb(156, 220, 254);\">keyCode</span> <span style=\"color: rgb(212, 212, 212);\">===</span> <span style=\"color: rgb(206, 145, 120);\">'13'</span>) {</p><p>                <span style=\"color: rgb(156, 220, 254);\">console</span>.<span style=\"color: rgb(220, 220, 170);\">log</span>(<span style=\"color: rgb(206, 145, 120);\">'User pressed Enter!'</span>)</p><p>            }</p><p>            <span style=\"color: rgb(124, 166, 104);\">/*...*/</span></p><p><span style=\"color: rgb(86, 156, 214);\">        }</span></p><p><span style=\"color: rgb(86, 156, 214);\">    }</span></p><p><span style=\"color: rgb(86, 156, 214);\">}</span></p><p><br></p><p><br></p><p>@keydown.enter</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">App</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(156, 220, 254);\">template:</span> <span style=\"color: rgb(206, 145, 120);\">`&lt;input @keydown.enter=\"onEnter\" &gt;`</span>,</p><p>    <span style=\"color: rgb(156, 220, 254);\">methods:</span> {</p><p>        <span style=\"color: rgb(220, 220, 170);\">onEnter</span>(<span style=\"color: rgb(156, 220, 254);\">e</span><span style=\"color: rgb(212, 212, 212);\">:</span> <span style=\"color: rgb(78, 201, 176);\">KeyboardEvent</span>) {</p><p>            <span style=\"color: rgb(156, 220, 254);\">console</span>.<span style=\"color: rgb(220, 220, 170);\">log</span>(<span style=\"color: rgb(206, 145, 120);\">'User pressed Enter!'</span>)</p><p>            <span style=\"color: rgb(124, 166, 104);\">/*...*/</span></p><p>        }</p><p>    }</p><p>}</p>",
        "cn": ""
    }
]