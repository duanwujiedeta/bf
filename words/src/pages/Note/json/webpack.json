[
    {
        "word": "<p><span style=\"background-color: rgba(245, 247, 250, 0.004); color: rgb(96, 98, 102);\">Compiling your JavaScript into one file will prevent multiple server hits.</span></p><p><br></p><p><span style=\"background-color: rgba(245, 247, 250, 0.318); color: rgb(96, 98, 102);\">$ node -v </span></p><p><br></p><p><span style=\"background-color: rgba(245, 247, 250, 0.318); color: rgb(96, 98, 102);\">$ mkdir webpack_beginners </span></p><p><br></p><p><span style=\"background-color: rgba(245, 247, 250, 0.318); color: rgb(96, 98, 102);\">$ cd webpack_beginners </span></p><p><br></p><p><span style=\"background-color: rgba(245, 247, 250, 0.318); color: rgb(96, 98, 102);\">$ npm init -y </span></p><p><br></p><p><span style=\"background-color: rgba(245, 247, 250, 0.318); color: rgb(96, 98, 102);\">$ npm install webpack webpack-cli --save-dev</span></p>",
        "tran": "<p><span style=\"color: rgb(96, 98, 102);\">if someone took your project later and ran “npm install” on their machine, they will get the exact same versions you installed.</span></p>"
    },
    {
        "word": "<p><span style=\"background-color: rgba(245, 247, 250, 0.114); color: rgb(96, 98, 102);\">open the node_modules f</span><span style=\"background-color: rgba(245, 247, 250, 0); color: rgb(96, 98, 102);\">older and locate our webpack package. the exact location, which is under “node_modules/.bin”.</span></p><p><br></p><p><span style=\"background-color: rgba(245, 247, 250, 0.557); color: rgb(96, 98, 102);\"><span class=\"ql-cursor\">﻿</span>The file “node_modules/.bin/webpack” responsible for running webpack command</span></p>",
        "tran": "<p><span style=\"background-color: rgb(245, 247, 250); color: rgb(96, 98, 102);\">However, it will assume the entry point of your project is src/index and will output the result in dist/main.js minified and optimized for production.</span></p>"
    },
    {
        "word": "<p><span style=\"background-color: rgba(245, 247, 250, 0.075); color: rgb(96, 98, 102);\">src/index.js </span></p><p><span style=\"background-color: rgba(245, 247, 250, 0.075); color: rgb(96, 98, 102);\">alert('Hello Webpack World !'); </span></p><p><span style=\"background-color: rgba(245, 247, 250, 0.075); color: rgb(96, 98, 102);\">Save the file, and in your terminal/console, run: </span></p><p><br></p><p><span style=\"background-color: rgba(245, 247, 250, 0.075); color: rgb(96, 98, 102);\"><span class=\"ql-cursor\">﻿</span>$ node_modules/.bin/webpack</span></p>",
        "tran": "<p><span style=\"background-color: rgb(245, 247, 250); color: rgb(96, 98, 102);\">to get rid of the warining: </span></p><p><span style=\"background-color: rgb(245, 247, 250); color: rgb(96, 98, 102);\">$ node_modules/.bin/webpack --mode=production</span></p>"
    },
    {
        "word": "<p>export { sayHello };</p><p><br></p><p>import { greeting } from './greeting.js'; </p><p><br></p><p>change name</p><p>import { sayHello as greeting } from './greeting.js';</p>",
        "tran": "<p>What if we change ‘./greeting.js’ to ‘greeting.js’ ? </p><p>What will happen?</p><p>Well, if you do so, webpack will assume you are looking for a node module, and it will go and search that name in node_modules folder,</p>"
    },
    {
        "word": "<p>Another note is that the file extension “.js” is optional in ./greeting.js. </p><p>Webpack is assuming that a file is a JavaScript by default, so it’s possible to write:</p><p>import { sayHello } from './greeting'</p>",
        "tran": "<p>webpack.config.js</p><p>module.exports = { </p><p class=\"ql-indent-1\">entry: \"./src/index.js\", </p><p class=\"ql-indent-1\">output: { filename: \"main.js\" } </p><p>}</p><p><br></p><p><br></p><p>build/application.js</p><p>module.exports = { </p><p class=\"ql-indent-1\">entry: \"./src/index.js\", </p><p class=\"ql-indent-1\">output: { </p><p class=\"ql-indent-2\">filename: \"../build/application.js\" </p><p class=\"ql-indent-1\">}</p><p>}</p>"
    },
    {
        "word": "<p>There is a better way to separate the folder name from the file name by using an option called “path” within our “output” configuration:</p><p>output: { </p><p class=\"ql-indent-1\">filename: \"application.js\", </p><p class=\"ql-indent-1\">path:\"/home/$USER/path/to/your/build/folder\" </p><p>}</p>",
        "tran": "<p>Dynamically resolving the working directory using “path” module</p><p><br></p><p>const path = require('path'); module.exports = { </p><p class=\"ql-indent-1\">entry: \"./src/index.js\",</p><p class=\"ql-indent-1\">output: { </p><p class=\"ql-indent-2\">filename: \"application.js\", </p><p class=\"ql-indent-2\">path: path.resolve(__dirname, 'build') </p><p class=\"ql-indent-1\">}</p><p> }</p>"
    },
    {
        "word": "<p>Setting webpack option “mode” to “development”</p><p>const path = require('path'); </p><p><br></p><p>module.exports = { </p><p class=\"ql-indent-1\">mode: \"development\", </p><p class=\"ql-indent-1\">entry: \"./src/index.js\", </p><p class=\"ql-indent-1\">output: { </p><p class=\"ql-indent-2\">filename: \"application.js\", </p><p class=\"ql-indent-2\">path: path.resolve(__dirname, 'build') </p><p class=\"ql-indent-1\">}</p><p>}</p>",
        "tran": "<p>Setting webpack option “watch” to “true”</p><p>module.exports = { </p><p class=\"ql-indent-1\">watch: true, </p><p class=\"ql-indent-1\">// ... // ... </p><p>}</p>"
    },
    {
        "word": "<p>Using Babel-Loader </p><p><br></p><p>$ npm install --save-dev babel-loader @babel/core @babel/preset-env</p><p><br></p><p>module.exports = { </p><p class=\"ql-indent-1\">// ... </p><p class=\"ql-indent-1\">output: { // ... }, </p><p class=\"ql-indent-1\">module: { </p><p class=\"ql-indent-2\">rules: [ </p><p class=\"ql-indent-2\">{ </p><p class=\"ql-indent-2\">test: /\\.m?js$/, </p><p class=\"ql-indent-2\">exclude:/(node_modules|bower_components)/, </p><p class=\"ql-indent-2\">use: { </p><p class=\"ql-indent-2\">loader: 'babel-loader', </p><p class=\"ql-indent-2\">options: { </p><p class=\"ql-indent-3\">presets: ['@babel/preset-env'] </p><p class=\"ql-indent-3\">}</p><p class=\"ql-indent-2\">     }</p><p class=\"ql-indent-2\">} </p><p class=\"ql-indent-2\">] </p><p class=\"ql-indent-1\">} </p><p>}</p>",
        "tran": "<p><br></p><p>“test” key/property with a regular expression “/\\.m?js$/” that tells webpack that whenever there is a file with an “.mjs or .js” extension, the babel-loader should be applied to it. </p><p><br></p><p>The “exclude” property, as its name suggests, tells webpack to skip files if they are node modules or bower components</p><p><br></p><p>he property “use” tells webpack the name of the loader to use, and sets some additional options as well. In this example, the “presets” is set to ‘@babel/preset-env’.</p>"
    },
    {
        "word": "<p>the “cheap-module-eval-source-map” will only show us the line number when debugging.控制台的输出带上了原文件的 line number.</p><p><br></p><p>const path = require('path'); module.exports = { </p><p class=\"ql-indent-1\">watch: true, </p><p class=\"ql-indent-1\">mode: \"development\", </p><p class=\"ql-indent-1\">devtool: \"cheap-module-eval-source-map\", </p><p class=\"ql-indent-1\">entry: \"./src/index.js\", </p><p class=\"ql-indent-1\">output: { </p><p class=\"ql-indent-2\">filename: \"application.js\", </p><p class=\"ql-indent-2\">path: path.resolve(__dirname, 'build') </p><p class=\"ql-indent-1\">}, </p><p class=\"ql-indent-1\">module: { </p><p class=\"ql-indent-2\">rules: [ </p><p class=\"ql-indent-2\">{ </p><p class=\"ql-indent-2\">test: /\\.m?js$/, </p><p class=\"ql-indent-2\">exclude:/(node_modules|bower_components)/, </p><p class=\"ql-indent-2\">use: { </p><p class=\"ql-indent-3\">loader: 'babel-loader', </p><p class=\"ql-indent-3\">options: { </p><p class=\"ql-indent-4\">presets: ['@babel/preset-env'] } </p><p class=\"ql-indent-3\">} </p><p class=\"ql-indent-2\">} </p><p class=\"ql-indent-2\">] </p><p class=\"ql-indent-1\">} </p><p>}</p>",
        "tran": "<p>Handling CSS and SASS Files </p><p><br></p><p>lib.css </p><p>body{ background-color: magenta; }</p><p><br></p><p>index.js </p><p>import lib from './lib.css'; </p><p>$ npm install css-loader --save-dev </p><p><br></p><p>const path = require('path'); module.exports = { </p><p class=\"ql-indent-1\">// ... </p><p class=\"ql-indent-1\">module: { </p><p class=\"ql-indent-2\">rules: [ </p><p class=\"ql-indent-2\">{ </p><p class=\"ql-indent-2\">test: /\\.m?js$/, </p><p class=\"ql-indent-2\">// ... </p><p class=\"ql-indent-2\">}, </p><p class=\"ql-indent-2\">{ </p><p class=\"ql-indent-2\">test: /\\.css$/i, </p><p class=\"ql-indent-2\">use: ['css-loader'], </p><p class=\"ql-indent-2\">} </p><p class=\"ql-indent-2\">] </p><p class=\"ql-indent-1\">} </p><p>}</p>"
    },
    {
        "word": "<p>$ npm install style-loader --save-dev</p><p>{ </p><p>test: /\\.css$/i, </p><p>use: ['style-loader', 'css-loader'], </p><p>}</p>",
        "tran": "<p>use: ['style-loader', 'css-loader'] </p><p>the order starts from the right to the left.</p><p>after builded.,a &lt;style&gt; tag was injected dynamically to our page by JavaScript, with the styling we imported from lib.css file.</p>"
    },
    {
        "word": "<p>{</p><p class=\"ql-indent-1\">test: /\\.scss$/i,</p><p class=\"ql-indent-1\">use: ['style-loader', 'css-loader', 'sass-loader'],</p><p>}</p>",
        "tran": "<p>Here we are testing if the file ends with “.scss”.</p><p>If so, we apply the “sass-loader” to it</p><p>first.After that, “sass-loader” recognizes and compiles our SASS files.</p><p>the “css-loader” will read that CSS turns it to CommonJS</p><p>our “style-loader” will inject it in the DOM dynamically via JavaScript</p><p><br></p>"
    },
    {
        "word": "<p>Usage:</p><p><br></p><p>application.scss</p><p>$gradient: linear-gradient(to right, #00467f, #a5cc82);</p><p>body{</p><p>\tbackground-image: $gradient;</p><p>}</p><p><br></p>",
        "tran": "<p>index.js&nbsp;</p><p>import application from \"./application.scss\"</p><p><br></p><p>build</p><p>$ npm run build</p>"
    },
    {
        "word": "<p>Using “postcss-loader” will allow us to do that automatically and add all the necessary prefixes without having to specify them ourselves.</p><p><br></p><p>$ npm install postcss-loader --save-dev</p>",
        "tran": "<p>{</p><p>test: /\\.css$/i,</p><p>use: [</p><p>'style-loader', </p><p>{ </p><p>\tloader: 'css-loader', </p><p>\toptions: { importLoaders: 1 } </p><p>},</p><p>'<strong>postcss-loader</strong>'],</p><p>},</p><p>{</p><p>test: /\\.scss$/i,</p><p>use: [</p><p>'style-loader', </p><p>{ </p><p>\tloader: 'css-loader', </p><p>\toptions: { importLoaders: 1 } </p><p>}, </p><p>'<strong>postcss-loader</strong>', </p><p>'sass-loader'],</p><p>}</p>"
    },
    {
        "word": "<p>Full config use SCSS</p><p><br></p><p>$ npm install autoprefixer --save-dev</p>",
        "tran": "<p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">path</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">require</span>(<span style=\"color: rgb(206, 145, 120);\">'path'</span>);</p><p><span style=\"color: rgb(78, 201, 176);\">module</span>.<span style=\"color: rgb(78, 201, 176);\">exports</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(124, 166, 104);\">// ...</span></p><p>    <span style=\"color: rgb(156, 220, 254);\">module:</span> {</p><p>        <span style=\"color: rgb(156, 220, 254);\">rules:</span> [</p><p>            <span style=\"color: rgb(124, 166, 104);\">// ...</span></p><p>            {</p><p>                <span style=\"color: rgb(156, 220, 254);\">test:</span><span style=\"color: rgb(209, 105, 105);\"> /</span><span style=\"color: rgb(86, 156, 214);\">\\.</span><span style=\"color: rgb(209, 105, 105);\">css</span><span style=\"color: rgb(197, 134, 192);\">$</span><span style=\"color: rgb(209, 105, 105);\">/</span><span style=\"color: rgb(86, 156, 214);\">i</span>,</p><p>                <span style=\"color: rgb(156, 220, 254);\">use:</span> [</p><p>                    <span style=\"color: rgb(206, 145, 120);\">'style-loader'</span>,</p><p>                    { <span style=\"color: rgb(156, 220, 254);\">loader:</span> <span style=\"color: rgb(206, 145, 120);\">'css-loader'</span>, <span style=\"color: rgb(156, 220, 254);\">options:</span> { <span style=\"color: rgb(156, 220, 254);\">importLoaders:</span> <span style=\"color: rgb(181, 206, 168);\">1</span> } },</p><p>                    {</p><p>                        <span style=\"color: rgb(156, 220, 254);\">loader:</span> <span style=\"color: rgb(206, 145, 120);\">'postcss-loader'</span>,</p><p>                        <span style=\"color: rgb(156, 220, 254);\">options:</span> {</p><p>                            <span style=\"color: rgb(156, 220, 254);\">plugins:</span> [</p><p>                                <span style=\"color: rgb(220, 220, 170);\">require</span>(<span style=\"color: rgb(206, 145, 120);\">'autoprefixer'</span>)({</p><p>                                    <span style=\"color: rgb(156, 220, 254);\">overrideBrowserslist:</span> [<span style=\"color: rgb(206, 145, 120);\">'last 3 versions'</span>, <span style=\"color: rgb(206, 145, 120);\">'ie &gt;9'</span>]</p><p>                                })</p><p>                            ]</p><p>                        }</p><p>                    }</p><p>                ],</p><p>            },</p><p>            {</p><p>                <span style=\"color: rgb(156, 220, 254);\">test:</span><span style=\"color: rgb(209, 105, 105);\"> /</span><span style=\"color: rgb(86, 156, 214);\">\\.</span><span style=\"color: rgb(209, 105, 105);\">scss</span><span style=\"color: rgb(197, 134, 192);\">$</span><span style=\"color: rgb(209, 105, 105);\">/</span><span style=\"color: rgb(86, 156, 214);\">i</span>,</p><p>                <span style=\"color: rgb(156, 220, 254);\">use:</span> [</p><p>                    <span style=\"color: rgb(206, 145, 120);\">'style-loader'</span>,</p><p>                    { <span style=\"color: rgb(156, 220, 254);\">loader:</span> <span style=\"color: rgb(206, 145, 120);\">'css-loader'</span>, <span style=\"color: rgb(156, 220, 254);\">options:</span> { <span style=\"color: rgb(156, 220, 254);\">importLoaders:</span> <span style=\"color: rgb(181, 206, 168);\">1</span> } },</p><p>                    {</p><p>                        <span style=\"color: rgb(156, 220, 254);\">loader:</span> <span style=\"color: rgb(206, 145, 120);\">'postcss-loader'</span>,</p><p>                        <span style=\"color: rgb(156, 220, 254);\">options:</span> {</p><p>                            <span style=\"color: rgb(156, 220, 254);\">plugins:</span> [</p><p>                                <span style=\"color: rgb(220, 220, 170);\">require</span>(<span style=\"color: rgb(206, 145, 120);\">'autoprefixer'</span>)({</p><p>                                    <span style=\"color: rgb(156, 220, 254);\">overrideBrowserslist:</span> [<span style=\"color: rgb(206, 145, 120);\">'last 3 versions'</span>, <span style=\"color: rgb(206, 145, 120);\">'ie &gt;9'</span>]</p><p>                                })</p><p>                            ]</p><p>                        }</p><p>                    },</p><p>                    <span style=\"color: rgb(206, 145, 120);\">'sass-loader'</span></p><p>                ],</p><p>            }</p><p>        ]</p><p>    }</p><p>}</p>"
    },
    {
        "word": "<p>// 提取css到它的单独文件中</p><p><br></p><p>$ npm install --save-dev mini-css-extract-plugin</p>",
        "tran": "<p>webpack.config.js</p><p><br></p><p>const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");</p><p>plugins: [</p><p>\tnew MiniCssExtractPlugin({</p><p>\t\tfilename: 'application.css'</p><p>\t})</p><p>]</p><p><br></p><p>To use MiniCssExtractPlugin.loader instead:</p><p>{</p><p>test: /\\.css$/i,</p><p>use: [</p><p>\tMiniCssExtractPlugin.loader,</p><p>\t// ...</p><p>]</p><p>}</p><p><br></p><p>{</p><p>test: /\\.scss$/i,</p><p>use: [</p><p>\tMiniCssExtractPlugin.loader,</p><p>\t// ...</p><p>]</p><p>}</p>"
    },
    {
        "word": "<p>Minifying the Extracted CSS</p><p><br></p><p>$ npm install optimize-css-assets-webpack-plugin --save-dev</p><p><br></p><p>“TerserJSPlugin,” which is a plugin that already comes with webpack. You won’t need to install it yourself; that’s the plugin used by default to minify your JavaScript when you use “production” mode.&nbsp;</p><p><br></p><p>Setting optimization.minimizer in your webpack.config.js, it will override the default behavior of webpack.</p>",
        "tran": "<p>const path = require('path');</p><p>const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");</p><p>const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-</p><p>plugin');</p><p>const TerserJSPlugin = require('terser-webpack-plugin');</p><p>module.exports = {</p><p>&nbsp;&nbsp;watch: true,</p><p>&nbsp;&nbsp;mode: \"production\",</p><p>&nbsp;&nbsp;devtool: \"cheap-module-eval-source-map\",</p><p>&nbsp;&nbsp;entry: \"./src/index.js\",</p><p>&nbsp;&nbsp;output: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;filename: \"application.js\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;path: path.resolve(__dirname, 'build')</p><p>&nbsp;&nbsp;},</p><p><strong>&nbsp;&nbsp;optimization: {</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;minimizer: [</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new TerserJSPlugin({}),</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new OptimizeCSSAssetsPlugin({})</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;],</strong></p><p><strong>&nbsp;&nbsp;},</strong></p><p>&nbsp;&nbsp;module: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;// ...</p><p>&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;plugins: [</p><p>&nbsp;&nbsp;&nbsp;&nbsp;// ...</p><p>&nbsp;&nbsp;]</p><p>}</p>"
    },
    {
        "word": "<p>Loading Image Files</p><p><br></p><p>$ npm install url-loader --save-dev</p><p><br></p><p>url-loader will directly transform any small image to base64 code and insert it for us instead of url(‘...’).</p>",
        "tran": "<p>{</p><p>&nbsp;&nbsp;test: /\\.(png|jpg|gif|svg)$/i,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;use: [</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader: 'url-loader',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;limit: 8192, <strong>// a size less or equal 8192 (size &lt;= 8192) byte</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;],</p><p>&nbsp;&nbsp;}</p><p><br></p><p><br></p><p>// To handle the file greater than 8192 byte,to use file-loader to instead.</p><p>$ npm install file-loader --save-dev</p><p><br></p><p>{</p><p>&nbsp;&nbsp;test: /\\.(png|jpg|gif|svg)$/i,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;use: [</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader: 'url-loader',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;limit: 8192, </p><p>\t\t <strong>name: '[name].[hash:7].[ext]' // 大于 8192 的不会转为 base64 ，直接复制资源，并用 url(xxx.jpg) 包裹</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;],</p><p>&nbsp;&nbsp;}</p>"
    },
    {
        "word": "<p>Compressing Images</p><p><br></p><p>MacOs </p><p>$ brew install libpng</p><p><br></p><p>$ npm install image-webpack-loader --save-dev</p><p><br></p><p>{</p><p>&nbsp;&nbsp;test: /\\.(png|jpg|gif|svg)$/i,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;use: [</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader: 'url-loader',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;limit: 8192,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: '[name].[hash:7].[ext]'</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>&nbsp;{ loader: 'image-webpack-loader' }</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;],</p><p>&nbsp;&nbsp;}</p>",
        "tran": "<p><br></p><p>Font assets to use file-loader</p><p>/(png|jpg|gif|svg|woff2?|eot|ttf|otf|wav)(\\?.*)?$/i</p>"
    },
    {
        "word": "<p>Cache</p><p>Webpack deal the caches for the browser.</p><p><br></p><p>From entry</p><p>entry: {</p><p>\t<strong>application</strong>: \"./src/index.js\",</p><p>\t<strong>admin</strong>: \"./src/admin.js\"</p><p>}</p><p><br></p><p>Output Files Naming</p><p><br></p><p>output: {</p><p>\tfilename: \"<strong>[name]</strong>.js\",</p><p>\tpath: path.resolve(__dirname, 'build')</p><p>}</p><p>Webpack will use the “entry” property names and create your output files based on those names.&nbsp;</p><p><br></p>",
        "tran": "<p>Multiple css file</p><p>import application from \"./application.scss\"</p><p>import lib from \"./lib.css\"</p><p><br></p><p>plugins: [</p><p>new MiniCssExtractPlugin({</p><p>filename: \"<strong>[name]</strong>.css\" <strong>// this name is based on the entry's property name.</strong></p><p>})</p><p>]</p>"
    },
    {
        "word": "<p>Adding Hash Content</p><p><br></p><p>There are basically three methods for resource name versioning:</p><p><br></p><ul><li>File name versioning (example: application-ers4e54aem1v8e.js)</li><li>File path versioning (example: /v3/application.js)</li><li>Query string versioning (application.js?version=3)</li></ul><p><br></p><p>Usage</p><p>output: {</p><p>\tfilename: \"[name]-<strong>[contenthash].</strong>js\",</p><p>\tpath: path.resolve(__dirname, 'build')</p><p>}</p><p><br></p><p>plugins: [</p><p>\tnew MiniCssExtractPlugin({</p><p>\tfilename: \"[name]-<strong>[contenthash]</strong>.css\"</p><p>})</p><p>]</p><p><br></p><p>file name placeholder link:</p><p>https://v4.webpack.js.org/configuration/output/#outputfilename</p>",
        "tran": ""
    },
    {
        "word": "<p>Cleaning the Build Directory</p><p>To delete the old file.</p><p><br></p><p>$ npm install --save-dev clean-webpack-plugin</p><p><br></p><p>const { CleanWebpackPlugin } = require('clean-webpack-plugin');</p><p><br></p><p>Now let’s go ahead and use it in the plugin section of webpack config file:(放在最前面优先使用他)</p><p><br></p><p>plugins: [</p><p>&nbsp;&nbsp;<strong>new CleanWebpackPlugin()</strong>,</p><p>&nbsp;&nbsp;new MiniCssExtractPlugin({</p><p>&nbsp;&nbsp;&nbsp;&nbsp;filename: '[name]-[contenthash].css'</p><p>&nbsp;&nbsp;})</p><p>]</p><p><br></p>",
        "tran": ""
    },
    {
        "word": "<p>Manifest Plugin</p><p><br></p><p>$ npm install --save-dev webpack-manifest-plugin</p><p><br></p><p>const WebpackManifestPlugin = require('webpack-manifest-plugin');</p><p><br></p><p>plugins: [</p><p>&nbsp;&nbsp;<strong>new WebpackManifestPlugin()</strong>,</p><p>&nbsp;&nbsp;// ...</p><p>]</p><p><br></p><p>To make a hash file json for the dynamic server-side language(like PHP).</p><p>The php file copy the manifest.json to use.</p>",
        "tran": "<p><br></p><p>htmlWebpackPlugin</p><p><br></p><p>$ npm install --save-dev html-webpack-plugin</p><p><br></p><p>const HtmlWebpackPlugin = require('html-webpack-plugin');</p><p><br></p><p>plugins: [</p><p><strong>new HtmlWebpackPlugin(</strong>{</p><p>\t<span style=\"color: rgb(230, 0, 0);\">template: './src/template.html'</span></p><p>}<strong>), // 放于开头，最先执行</strong></p><p>// ...</p><p>]</p><p><br></p>"
    }
]