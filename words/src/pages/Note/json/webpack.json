[
    {
        "word": "<p><span style=\"background-color: rgba(245, 247, 250, 0.004); color: rgb(96, 98, 102);\">Compiling your JavaScript into one file will prevent multiple server hits.</span></p><p><br></p><p><span style=\"background-color: rgba(245, 247, 250, 0.318); color: rgb(96, 98, 102);\">$ node -v </span></p><p><br></p><p><span style=\"background-color: rgba(245, 247, 250, 0.318); color: rgb(96, 98, 102);\">$ mkdir webpack_beginners </span></p><p><br></p><p><span style=\"background-color: rgba(245, 247, 250, 0.318); color: rgb(96, 98, 102);\">$ cd webpack_beginners </span></p><p><br></p><p><span style=\"background-color: rgba(245, 247, 250, 0.318); color: rgb(96, 98, 102);\">$ npm init -y </span></p><p><br></p><p><span style=\"background-color: rgba(245, 247, 250, 0.318); color: rgb(96, 98, 102);\">$ npm install webpack webpack-cli --save-dev</span></p>",
        "tran": "<p><span style=\"color: rgb(96, 98, 102);\">if someone took your project later and ran “npm install” on their machine, they will get the exact same versions you installed.</span></p>"
    },
    {
        "word": "<p><span style=\"background-color: rgba(245, 247, 250, 0.114); color: rgb(96, 98, 102);\">open the node_modules f</span><span style=\"background-color: rgba(245, 247, 250, 0); color: rgb(96, 98, 102);\">older and locate our webpack package. the exact location, which is under “node_modules/.bin”.</span></p><p><br></p><p><span style=\"background-color: rgba(245, 247, 250, 0.557); color: rgb(96, 98, 102);\"><span class=\"ql-cursor\">﻿</span>The file “node_modules/.bin/webpack” responsible for running webpack command</span></p>",
        "tran": "<p><span style=\"background-color: rgb(245, 247, 250); color: rgb(96, 98, 102);\">However, it will assume the entry point of your project is src/index and will output the result in dist/main.js minified and optimized for production.</span></p>"
    },
    {
        "word": "<p><span style=\"background-color: rgba(245, 247, 250, 0.075); color: rgb(96, 98, 102);\">src/index.js </span></p><p><span style=\"background-color: rgba(245, 247, 250, 0.075); color: rgb(96, 98, 102);\">alert('Hello Webpack World !'); </span></p><p><span style=\"background-color: rgba(245, 247, 250, 0.075); color: rgb(96, 98, 102);\">Save the file, and in your terminal/console, run: </span></p><p><br></p><p><span style=\"background-color: rgba(245, 247, 250, 0.075); color: rgb(96, 98, 102);\"><span class=\"ql-cursor\">﻿</span>$ node_modules/.bin/webpack</span></p>",
        "tran": "<p><span style=\"background-color: rgb(245, 247, 250); color: rgb(96, 98, 102);\">to get rid of the warining: </span></p><p><span style=\"background-color: rgb(245, 247, 250); color: rgb(96, 98, 102);\">$ node_modules/.bin/webpack --mode=production</span></p>"
    },
    {
        "word": "<p>export { sayHello };</p><p><br></p><p>import { greeting } from './greeting.js'; </p><p><br></p><p>change name</p><p>import { sayHello as greeting } from './greeting.js';</p>",
        "tran": "<p>What if we change ‘./greeting.js’ to ‘greeting.js’ ? </p><p>What will happen?</p><p>Well, if you do so, webpack will assume you are looking for a node module, and it will go and search that name in node_modules folder,</p>"
    },
    {
        "word": "<p>Another note is that the file extension “.js” is optional in ./greeting.js. </p><p>Webpack is assuming that a file is a JavaScript by default, so it’s possible to write:</p><p>import { sayHello } from './greeting'</p>",
        "tran": "<p>webpack.config.js</p><p>module.exports = { </p><p class=\"ql-indent-1\">entry: \"./src/index.js\", </p><p class=\"ql-indent-1\">output: { filename: \"main.js\" } </p><p>}</p><p><br></p><p><br></p><p>build/application.js</p><p>module.exports = { </p><p class=\"ql-indent-1\">entry: \"./src/index.js\", </p><p class=\"ql-indent-1\">output: { </p><p class=\"ql-indent-2\">filename: \"../build/application.js\" </p><p class=\"ql-indent-1\">}</p><p>}</p>"
    },
    {
        "word": "<p>There is a better way to separate the folder name from the file name by using an option called “path” within our “output” configuration:</p><p>output: { </p><p class=\"ql-indent-1\">filename: \"application.js\", </p><p class=\"ql-indent-1\">path:\"/home/$USER/path/to/your/build/folder\" </p><p>}</p>",
        "tran": "<p>Dynamically resolving the working directory using “path” module</p><p><br></p><p>const path = require('path'); module.exports = { </p><p class=\"ql-indent-1\">entry: \"./src/index.js\",</p><p class=\"ql-indent-1\">output: { </p><p class=\"ql-indent-2\">filename: \"application.js\", </p><p class=\"ql-indent-2\">path: path.resolve(__dirname, 'build') </p><p class=\"ql-indent-1\">}</p><p> }</p>"
    },
    {
        "word": "<p>Setting webpack option “mode” to “development”</p><p>const path = require('path'); </p><p><br></p><p>module.exports = { </p><p class=\"ql-indent-1\">mode: \"development\", </p><p class=\"ql-indent-1\">entry: \"./src/index.js\", </p><p class=\"ql-indent-1\">output: { </p><p class=\"ql-indent-2\">filename: \"application.js\", </p><p class=\"ql-indent-2\">path: path.resolve(__dirname, 'build') </p><p class=\"ql-indent-1\">}</p><p>}</p>",
        "tran": "<p>Setting webpack option “watch” to “true”</p><p>module.exports = { </p><p class=\"ql-indent-1\">watch: true, </p><p class=\"ql-indent-1\">// ... // ... </p><p>}</p>"
    },
    {
        "word": "<p>Using Babel-Loader </p><p><br></p><p>$ npm install --save-dev babel-loader @babel/core @babel/preset-env</p><p><br></p><p>module.exports = { </p><p class=\"ql-indent-1\">// ... </p><p class=\"ql-indent-1\">output: { // ... }, </p><p class=\"ql-indent-1\">module: { </p><p class=\"ql-indent-2\">rules: [ </p><p class=\"ql-indent-2\">{ </p><p class=\"ql-indent-2\">test: /\\.m?js$/, </p><p class=\"ql-indent-2\">exclude:/(node_modules|bower_components)/, </p><p class=\"ql-indent-2\">use: { </p><p class=\"ql-indent-2\">loader: 'babel-loader', </p><p class=\"ql-indent-2\">options: { </p><p class=\"ql-indent-3\">presets: ['@babel/preset-env'] </p><p class=\"ql-indent-3\">}</p><p class=\"ql-indent-2\">     }</p><p class=\"ql-indent-2\">} </p><p class=\"ql-indent-2\">] </p><p class=\"ql-indent-1\">} </p><p>}</p>",
        "tran": "<p><br></p><p>“test” key/property with a regular expression “/\\.m?js$/” that tells webpack that whenever there is a file with an “.mjs or .js” extension, the babel-loader should be applied to it. </p><p><br></p><p>The “exclude” property, as its name suggests, tells webpack to skip files if they are node modules or bower components</p><p><br></p><p>he property “use” tells webpack the name of the loader to use, and sets some additional options as well. In this example, the “presets” is set to ‘@babel/preset-env’.</p>"
    },
    {
        "word": "<p>the “cheap-module-eval-source-map” will only show us the line number when debugging.控制台的输出带上了原文件的 line number.</p><p><br></p><p>const path = require('path'); module.exports = { </p><p class=\"ql-indent-1\">watch: true, </p><p class=\"ql-indent-1\">mode: \"development\", </p><p class=\"ql-indent-1\">devtool: \"cheap-module-eval-source-map\", </p><p class=\"ql-indent-1\">entry: \"./src/index.js\", </p><p class=\"ql-indent-1\">output: { </p><p class=\"ql-indent-2\">filename: \"application.js\", </p><p class=\"ql-indent-2\">path: path.resolve(__dirname, 'build') </p><p class=\"ql-indent-1\">}, </p><p class=\"ql-indent-1\">module: { </p><p class=\"ql-indent-2\">rules: [ </p><p class=\"ql-indent-2\">{ </p><p class=\"ql-indent-2\">test: /\\.m?js$/, </p><p class=\"ql-indent-2\">exclude:/(node_modules|bower_components)/, </p><p class=\"ql-indent-2\">use: { </p><p class=\"ql-indent-3\">loader: 'babel-loader', </p><p class=\"ql-indent-3\">options: { </p><p class=\"ql-indent-4\">presets: ['@babel/preset-env'] } </p><p class=\"ql-indent-3\">} </p><p class=\"ql-indent-2\">} </p><p class=\"ql-indent-2\">] </p><p class=\"ql-indent-1\">} </p><p>}</p>",
        "tran": "<p>Handling CSS and SASS Files </p><p><br></p><p>lib.css </p><p>body{ background-color: magenta; }</p><p><br></p><p>index.js </p><p>import lib from './lib.css'; </p><p>$ npm install css-loader --save-dev </p><p><br></p><p>const path = require('path'); module.exports = { </p><p class=\"ql-indent-1\">// ... </p><p class=\"ql-indent-1\">module: { </p><p class=\"ql-indent-2\">rules: [ </p><p class=\"ql-indent-2\">{ </p><p class=\"ql-indent-2\">test: /\\.m?js$/, </p><p class=\"ql-indent-2\">// ... </p><p class=\"ql-indent-2\">}, </p><p class=\"ql-indent-2\">{ </p><p class=\"ql-indent-2\">test: /\\.css$/i, </p><p class=\"ql-indent-2\">use: ['css-loader'], </p><p class=\"ql-indent-2\">} </p><p class=\"ql-indent-2\">] </p><p class=\"ql-indent-1\">} </p><p>}</p>"
    },
    {
        "word": "<p>$ npm install style-loader --save-dev</p><p>{ </p><p>test: /\\.css$/i, </p><p>use: ['style-loader', 'css-loader'], </p><p>}</p>",
        "tran": "<p>use: ['style-loader', 'css-loader'] </p><p>the order starts from the right to the left.</p><p>after builded.,a &lt;style&gt; tag was injected dynamically to our page by JavaScript, with the styling we imported from lib.css file.</p>"
    },
    {
        "word": "<p>{</p><p class=\"ql-indent-1\">test: /\\.scss$/i,</p><p class=\"ql-indent-1\">use: ['style-loader', 'css-loader', 'sass-loader'],</p><p>}</p>",
        "tran": "<p>Here we are testing if the file ends with “.scss”.</p><p>If so, we apply the “sass-loader” to it</p><p>first.After that, “sass-loader” recognizes and compiles our SASS files.</p><p>the “css-loader” will read that CSS turns it to CommonJS</p><p>our “style-loader” will inject it in the DOM dynamically via JavaScript</p><p><br></p>"
    },
    {
        "word": "<p>Usage:</p><p><br></p><p>application.scss</p><p>$gradient: linear-gradient(to right, #00467f, #a5cc82);</p><p>body{</p><p>\tbackground-image: $gradient;</p><p>}</p><p><br></p>",
        "tran": "<p>index.js&nbsp;</p><p>import application from \"./application.scss\"</p><p><br></p><p>build</p><p>$ npm run build</p>"
    },
    {
        "word": "<p>Using “postcss-loader” will allow us to do that automatically and add all the necessary prefixes without having to specify them ourselves.</p><p><br></p><p>$ npm install postcss-loader --save-dev</p>",
        "tran": "<p>{</p><p>test: /\\.css$/i,</p><p>use: [</p><p>'style-loader', </p><p>{ </p><p>\tloader: 'css-loader', </p><p>\toptions: { importLoaders: 1 } </p><p>},</p><p>'<strong>postcss-loader</strong>'],</p><p>},</p><p>{</p><p>test: /\\.scss$/i,</p><p>use: [</p><p>'style-loader', </p><p>{ </p><p>\tloader: 'css-loader', </p><p>\toptions: { importLoaders: 1 } </p><p>}, </p><p>'<strong>postcss-loader</strong>', </p><p>'sass-loader'],</p><p>}</p>"
    },
    {
        "word": "<p>Full config use SCSS</p><p><br></p><p>$ npm install autoprefixer --save-dev</p>",
        "tran": "<p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">path</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">require</span>(<span style=\"color: rgb(206, 145, 120);\">'path'</span>);</p><p><span style=\"color: rgb(78, 201, 176);\">module</span>.<span style=\"color: rgb(78, 201, 176);\">exports</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>    <span style=\"color: rgb(124, 166, 104);\">// ...</span></p><p>    <span style=\"color: rgb(156, 220, 254);\">module:</span> {</p><p>        <span style=\"color: rgb(156, 220, 254);\">rules:</span> [</p><p>            <span style=\"color: rgb(124, 166, 104);\">// ...</span></p><p>            {</p><p>                <span style=\"color: rgb(156, 220, 254);\">test:</span><span style=\"color: rgb(209, 105, 105);\"> /</span><span style=\"color: rgb(86, 156, 214);\">\\.</span><span style=\"color: rgb(209, 105, 105);\">css</span><span style=\"color: rgb(197, 134, 192);\">$</span><span style=\"color: rgb(209, 105, 105);\">/</span><span style=\"color: rgb(86, 156, 214);\">i</span>,</p><p>                <span style=\"color: rgb(156, 220, 254);\">use:</span> [</p><p>                    <span style=\"color: rgb(206, 145, 120);\">'style-loader'</span>,</p><p>                    { <span style=\"color: rgb(156, 220, 254);\">loader:</span> <span style=\"color: rgb(206, 145, 120);\">'css-loader'</span>, <span style=\"color: rgb(156, 220, 254);\">options:</span> { <span style=\"color: rgb(156, 220, 254);\">importLoaders:</span> <span style=\"color: rgb(181, 206, 168);\">1</span> } },</p><p>                    {</p><p>                        <span style=\"color: rgb(156, 220, 254);\">loader:</span> <span style=\"color: rgb(206, 145, 120);\">'postcss-loader'</span>,</p><p>                        <span style=\"color: rgb(156, 220, 254);\">options:</span> {</p><p>                            <span style=\"color: rgb(156, 220, 254);\">plugins:</span> [</p><p>                                <span style=\"color: rgb(220, 220, 170);\">require</span>(<span style=\"color: rgb(206, 145, 120);\">'autoprefixer'</span>)({</p><p>                                    <span style=\"color: rgb(156, 220, 254);\">overrideBrowserslist:</span> [<span style=\"color: rgb(206, 145, 120);\">'last 3 versions'</span>, <span style=\"color: rgb(206, 145, 120);\">'ie &gt;9'</span>]</p><p>                                })</p><p>                            ]</p><p>                        }</p><p>                    }</p><p>                ],</p><p>            },</p><p>            {</p><p>                <span style=\"color: rgb(156, 220, 254);\">test:</span><span style=\"color: rgb(209, 105, 105);\"> /</span><span style=\"color: rgb(86, 156, 214);\">\\.</span><span style=\"color: rgb(209, 105, 105);\">scss</span><span style=\"color: rgb(197, 134, 192);\">$</span><span style=\"color: rgb(209, 105, 105);\">/</span><span style=\"color: rgb(86, 156, 214);\">i</span>,</p><p>                <span style=\"color: rgb(156, 220, 254);\">use:</span> [</p><p>                    <span style=\"color: rgb(206, 145, 120);\">'style-loader'</span>,</p><p>                    { <span style=\"color: rgb(156, 220, 254);\">loader:</span> <span style=\"color: rgb(206, 145, 120);\">'css-loader'</span>, <span style=\"color: rgb(156, 220, 254);\">options:</span> { <span style=\"color: rgb(156, 220, 254);\">importLoaders:</span> <span style=\"color: rgb(181, 206, 168);\">1</span> } },</p><p>                    {</p><p>                        <span style=\"color: rgb(156, 220, 254);\">loader:</span> <span style=\"color: rgb(206, 145, 120);\">'postcss-loader'</span>,</p><p>                        <span style=\"color: rgb(156, 220, 254);\">options:</span> {</p><p>                            <span style=\"color: rgb(156, 220, 254);\">plugins:</span> [</p><p>                                <span style=\"color: rgb(220, 220, 170);\">require</span>(<span style=\"color: rgb(206, 145, 120);\">'autoprefixer'</span>)({</p><p>                                    <span style=\"color: rgb(156, 220, 254);\">overrideBrowserslist:</span> [<span style=\"color: rgb(206, 145, 120);\">'last 3 versions'</span>, <span style=\"color: rgb(206, 145, 120);\">'ie &gt;9'</span>]</p><p>                                })</p><p>                            ]</p><p>                        }</p><p>                    },</p><p>                    <span style=\"color: rgb(206, 145, 120);\">'sass-loader'</span></p><p>                ],</p><p>            }</p><p>        ]</p><p>    }</p><p>}</p>"
    },
    {
        "word": "<p>// 提取css到它的单独文件中</p><p><br></p><p>$ npm install --save-dev mini-css-extract-plugin</p>",
        "tran": "<p>webpack.config.js</p><p><br></p><p>const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");</p><p>plugins: [</p><p>\tnew MiniCssExtractPlugin({</p><p>\t\tfilename: 'application.css'</p><p>\t})</p><p>]</p><p><br></p><p>To use MiniCssExtractPlugin.loader instead:</p><p>{</p><p>test: /\\.css$/i,</p><p>use: [</p><p>\tMiniCssExtractPlugin.loader,</p><p>\t// ...</p><p>]</p><p>}</p><p><br></p><p>{</p><p>test: /\\.scss$/i,</p><p>use: [</p><p>\tMiniCssExtractPlugin.loader,</p><p>\t// ...</p><p>]</p><p>}</p>"
    },
    {
        "word": "<p>Minifying the Extracted CSS</p><p><br></p><p>$ npm install optimize-css-assets-webpack-plugin --save-dev</p><p><br></p><p>“TerserJSPlugin,” which is a plugin that already comes with webpack. You won’t need to install it yourself; that’s the plugin used by default to minify your JavaScript when you use “production” mode.&nbsp;</p><p><br></p><p>Setting optimization.minimizer in your webpack.config.js, it will override the default behavior of webpack.</p>",
        "tran": "<p>const path = require('path');</p><p>const MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");</p><p>const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-</p><p>plugin');</p><p>const TerserJSPlugin = require('terser-webpack-plugin');</p><p>module.exports = {</p><p>&nbsp;&nbsp;watch: true,</p><p>&nbsp;&nbsp;mode: \"production\",</p><p>&nbsp;&nbsp;devtool: \"cheap-module-eval-source-map\",</p><p>&nbsp;&nbsp;entry: \"./src/index.js\",</p><p>&nbsp;&nbsp;output: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;filename: \"application.js\",</p><p>&nbsp;&nbsp;&nbsp;&nbsp;path: path.resolve(__dirname, 'build')</p><p>&nbsp;&nbsp;},</p><p><strong>&nbsp;&nbsp;optimization: {</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;minimizer: [</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new TerserJSPlugin({}),</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new OptimizeCSSAssetsPlugin({})</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;],</strong></p><p><strong>&nbsp;&nbsp;},</strong></p><p>&nbsp;&nbsp;module: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;// ...</p><p>&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;plugins: [</p><p>&nbsp;&nbsp;&nbsp;&nbsp;// ...</p><p>&nbsp;&nbsp;]</p><p>}</p>"
    },
    {
        "word": "<p>Loading Image Files</p><p><br></p><p>$ npm install url-loader --save-dev</p><p><br></p><p>url-loader will directly transform any small image to base64 code and insert it for us instead of url(‘...’).</p>",
        "tran": "<p>{</p><p>&nbsp;&nbsp;test: /\\.(png|jpg|gif|svg)$/i,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;use: [</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader: 'url-loader',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;limit: 8192, <strong>// a size less or equal 8192 (size &lt;= 8192) byte</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;],</p><p>&nbsp;&nbsp;}</p><p><br></p><p><br></p><p>// To handle the file greater than 8192 byte,to use file-loader to instead.</p><p>$ npm install file-loader --save-dev</p><p><br></p><p>{</p><p>&nbsp;&nbsp;test: /\\.(png|jpg|gif|svg)$/i,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;use: [</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader: 'url-loader',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;limit: 8192, </p><p>\t\t <strong>name: '[name].[hash:7].[ext]' // 大于 8192 的不会转为 base64 ，直接复制资源，并用 url(xxx.jpg) 包裹</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;],</p><p>&nbsp;&nbsp;}</p>"
    },
    {
        "word": "<p>Compressing Images</p><p><br></p><p>MacOs </p><p>$ brew install libpng</p><p><br></p><p>$ npm install image-webpack-loader --save-dev</p><p><br></p><p>{</p><p>&nbsp;&nbsp;test: /\\.(png|jpg|gif|svg)$/i,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;use: [</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loader: 'url-loader',</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;limit: 8192,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: '[name].[hash:7].[ext]'</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>&nbsp;{ loader: 'image-webpack-loader' }</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;],</p><p>&nbsp;&nbsp;}</p>",
        "tran": "<p><br></p><p>Font assets to use file-loader</p><p>/(png|jpg|gif|svg|woff2?|eot|ttf|otf|wav)(\\?.*)?$/i</p>"
    },
    {
        "word": "<p>Cache</p><p>Webpack deal the caches for the browser.</p><p><br></p><p>From entry</p><p>entry: {</p><p>\t<strong>application</strong>: \"./src/index.js\",</p><p>\t<strong>admin</strong>: \"./src/admin.js\"</p><p>}</p><p><br></p><p>Output Files Naming</p><p><br></p><p>output: {</p><p>\tfilename: \"<strong>[name]</strong>.js\",</p><p>\tpath: path.resolve(__dirname, 'build')</p><p>}</p><p>Webpack will use the “entry” property names and create your output files based on those names.&nbsp;</p><p><br></p>",
        "tran": "<p>Multiple css file</p><p>import application from \"./application.scss\"</p><p>import lib from \"./lib.css\"</p><p><br></p><p>plugins: [</p><p>new MiniCssExtractPlugin({</p><p>filename: \"<strong>[name]</strong>.css\" <strong>// this name is based on the entry's property name.</strong></p><p>})</p><p>]</p>"
    },
    {
        "word": "<p>Adding Hash Content</p><p><br></p><p>There are basically three methods for resource name versioning:</p><p><br></p><ul><li>File name versioning (example: application-ers4e54aem1v8e.js)</li><li>File path versioning (example: /v3/application.js)</li><li>Query string versioning (application.js?version=3)</li></ul><p><br></p><p>Usage</p><p>output: {</p><p>\tfilename: \"[name]-<strong>[contenthash].</strong>js\",</p><p>\tpath: path.resolve(__dirname, 'build')</p><p>}</p><p><br></p><p>plugins: [</p><p>\tnew MiniCssExtractPlugin({</p><p>\tfilename: \"[name]-<strong>[contenthash]</strong>.css\"</p><p>})</p><p>]</p><p><br></p><p>file name placeholder link:</p><p>https://v4.webpack.js.org/configuration/output/#outputfilename</p>",
        "tran": ""
    },
    {
        "word": "<p>Cleaning the Build Directory</p><p>To delete the old file.</p><p><br></p><p>$ npm install --save-dev clean-webpack-plugin</p><p><br></p><p>const { CleanWebpackPlugin } = require('clean-webpack-plugin');</p><p><br></p><p>Now let’s go ahead and use it in the plugin section of webpack config file:(放在最前面优先使用他)</p><p><br></p><p>plugins: [</p><p>&nbsp;&nbsp;<strong>new CleanWebpackPlugin()</strong>,</p><p>&nbsp;&nbsp;new MiniCssExtractPlugin({</p><p>&nbsp;&nbsp;&nbsp;&nbsp;filename: '[name]-[contenthash].css'</p><p>&nbsp;&nbsp;})</p><p>]</p><p><br></p>",
        "tran": ""
    },
    {
        "word": "<p>Manifest Plugin</p><p><br></p><p>$ npm install --save-dev webpack-manifest-plugin</p><p><br></p><p>const WebpackManifestPlugin = require('webpack-manifest-plugin');</p><p><br></p><p>plugins: [</p><p>&nbsp;&nbsp;<strong>new WebpackManifestPlugin()</strong>,</p><p>&nbsp;&nbsp;// ...</p><p>]</p><p><br></p><p>To make a hash file json for the dynamic server-side language(like PHP).</p><p>The php file copy the manifest.json to use.</p>",
        "tran": "<p><br></p><p>htmlWebpackPlugin</p><p><br></p><p>$ npm install --save-dev html-webpack-plugin</p><p><br></p><p>const HtmlWebpackPlugin = require('html-webpack-plugin');</p><p><br></p><p>plugins: [</p><p><strong>new HtmlWebpackPlugin(</strong>{</p><p>\t<span style=\"color: rgb(230, 0, 0);\">template: './src/template.html'</span></p><p>}<strong>), // 放于开头，最先执行</strong></p><p>// ...</p><p>]</p><p><br></p>"
    },
    {
        "word": "<p>Resolving Folders</p><p>how to replace their path by aliases and how to resolve modules from them.&nbsp;</p><p><br></p><p>src folder:</p><p>\tjavascripts:for js files</p><p>\tstylesheets:for css/scss files</p><p>\timages:for image files</p><p><br></p><p><br></p><p>entry: {</p><p>&nbsp;&nbsp;application: \"./src/javascripts/index.js\",</p><p>&nbsp;&nbsp;admin: \"./src/javascripts/admin.js\"</p><p>}</p><p><br></p><p>ndex.js&nbsp;</p><p>import application from \"../stylesheets/application.scss\"</p><p><br></p><p>admin.js</p><p>import lib from \"../stylesheets/lib.css\"</p><p>background-image: url('../images/cat.jpg');</p>",
        "tran": "<p><br></p><p>Use alia or alias</p><p>module.exports = {</p><p>&nbsp;&nbsp;//...</p><p>&nbsp;&nbsp;resolve: {</p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;alias: {</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CssFolder: path.resolve(__dirname, 'src/stylesheets/')</strong></p><p><strong>&nbsp;&nbsp;&nbsp;&nbsp;}</strong></p><p>&nbsp;&nbsp;}</p><p>}</p><p><br></p><p>mport a CSS/SCSS file, i.e: application.scss, we can simply use:</p><p>import application from <strong>\"CssFolder/</strong>application.scss\"</p>"
    },
    {
        "word": "<p>Resolving Modules</p><p><br></p><p>import $ from 'jquery'</p><p>Webpack will look into the “node_modules” directory</p><p>the same config below:</p><p>module.exports = {</p><p>&nbsp;&nbsp;//...</p><p>&nbsp;&nbsp;resolve: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;alias: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CssFolder: path.resolve(__dirname, 'src/stylesheets/')</p><p>&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>modules: ['node_modules']</strong></p><p>&nbsp;&nbsp;}</p><p>};</p>",
        "tran": "<p><br></p><p>If we want to tell webpack to look in another directory before going to “node_</p><p>modules”,to specify that folder before the “node_modules” folder in the resolve.modules option.</p><p>module.exports = {</p><p>&nbsp;&nbsp;// ...</p><p>&nbsp;&nbsp;resolve: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;alias: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CssFolder: path.resolve(__dirname, 'src/stylesheets/')</p><p>&nbsp;&nbsp;&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;&nbsp;&nbsp;modules: [path.resolve(__dirname, '<strong>src/downloaded_libs'</strong>), '<strong>node_modules</strong>']</p><p>&nbsp;&nbsp;},</p><p>};</p><p><br></p><p>Now webpack will look in “downloaded_libs” folder first, then if the module we are looking for doesn’t exist there, it will continue the search in the “node_modules” folder.</p>"
    },
    {
        "word": "<p>Webpack DevServer</p><p><br></p><p>$ npm install --save-dev webpack-dev-server</p><p>module.exports = {</p><p>&nbsp;&nbsp;devServer: {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;port: 9000,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;contentBase: path.resolve(__dirname, 'build')</p><p>&nbsp;&nbsp;},</p><p>&nbsp;&nbsp;// ...</p><p>}</p><p>when using webpack-dev-server, that bundle will be built and served from memory.</p><p>f any resource (HTML, JS, CSS, etc.) is not found in memory, webpack-dev-server will look at the “contentBase” path and try to find the missed file there.&nbsp;</p><p><br></p><p>\"scripts\": {</p><p>\t\"build\": \"webpack\",<strong>  </strong></p><p>\t\"start\": \"<strong>webpack-dev-server</strong>\"  <strong>//When use dev-server,the command</strong></p><p>}</p>",
        "tran": "<p>“Webpack output is served from /”, this means that the bundle will be served from the root of the server, which is basically like a virtual location in the memory. This location can be changed using an option called publicPath.</p>"
    },
    {
        "word": "<p>devServer publicPath</p><p>devServer: {</p><p>&nbsp;&nbsp;port: 9000,</p><p>&nbsp;&nbsp;&nbsp;&nbsp;contentBase: path.resolve(__dirname, 'build'),</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<strong>publicPath: '/assets/'</strong></p><p>}</p>",
        "tran": "<p><br></p><p>Hot Module Replacement we want these changes to be reflected in the page immediately without fully reloading it. That’s when HMR (Hot Module Replacement) comes into play;</p><p><br></p><p>devServer: {</p><p>&nbsp;&nbsp;port: 9000,</p><p>&nbsp;&nbsp;contentBase: path.resolve(__dirname, 'build'),</p><p><strong>&nbsp;&nbsp;hot: true</strong></p><p>}</p><p><br></p><p>// Use the [contenthash] will cause error,use [hash] instend.</p><p><br></p><p>the generated hash is based on our source files together,that means if we change something in one file, a new hash will be generated and all bundled files’ names will be set with this new hash.</p><p><br></p><p>[chunkhash] is based every chunk,the different chunk use the same files,the results is different.</p><p><br></p><p>the [contenthash] is calculated based on each file content separately, which means if the content of a file changes.</p>"
    },
    {
        "word": "<p>[contenthash] only for production while using [hash] or even better not using caching at all in development mode.&nbsp;</p><p><br></p><p>output: {</p><p>\tfilename: <span style=\"color: rgb(156, 220, 254);\">mode</span> <span style=\"color: rgb(212, 212, 212);\">===</span> <span style=\"color: rgb(206, 145, 120);\">'production'</span> <span style=\"color: rgb(212, 212, 212);\">?</span> <span style=\"color: rgb(206, 145, 120);\">\"[name]-[contenthash].js\"</span> <span style=\"color: rgb(212, 212, 212);\">:</span> <span style=\"color: rgb(206, 145, 120);\">'[name].js'</span>,</p><p>    <span style=\"color: rgb(124, 166, 104);\">// ...</span></p><p>    }</p><p><br></p><p>plugins: [</p><p>    <span style=\"color: rgb(124, 166, 104);\">// ...</span></p><p>    <span style=\"color: rgb(86, 156, 214);\">new</span> <span style=\"color: rgb(220, 220, 170);\">MiniCssExtractPlugin</span>({</p><p>        <span style=\"color: rgb(156, 220, 254);\">filename:</span> <span style=\"color: rgb(156, 220, 254);\">mode</span> <span style=\"color: rgb(212, 212, 212);\">===</span> <span style=\"color: rgb(206, 145, 120);\">'production'</span> <span style=\"color: rgb(212, 212, 212);\">?</span> <span style=\"color: rgb(206, 145, 120);\">\"[name]-[contenthash].css\"</span> <span style=\"color: rgb(212, 212, 212);\">:</span></p><p>            <span style=\"color: rgb(206, 145, 120);\">'[name].css'</span>,</p><p>    })</p><p>]</p>",
        "tran": "<p>HMR log:</p><p>add code to \"src/javascripts/index.js\"</p><p><br></p><p><span style=\"color: rgb(197, 134, 192);\">if</span> (<span style=\"color: rgb(78, 201, 176);\">module</span>.<span style=\"color: rgb(156, 220, 254);\">hot</span>) {</p><p>    <span style=\"color: rgb(78, 201, 176);\">module</span>.<span style=\"color: rgb(156, 220, 254);\">hot</span>.<span style=\"color: rgb(220, 220, 170);\">accept</span>(<span style=\"color: rgb(86, 156, 214);\">function</span> (<span style=\"color: rgb(156, 220, 254);\">err</span>) {</p><p>        <span style=\"color: rgb(156, 220, 254);\">console</span>.<span style=\"color: rgb(220, 220, 170);\">log</span>(<span style=\"color: rgb(156, 220, 254);\">err</span>);</p><p>    });</p><p>}</p>"
    },
    {
        "word": "<p>MiniCssExtractPlugin.loader</p><p><br></p><p>{</p><p>\tloader: MiniCssExtractPlugin.loader,</p><p>\toptions: {</p><p>\t\t<strong>hmr: true,</strong></p><p>\t},</p><p>}</p>",
        "tran": "<p>overlay option</p><p>This will tell webpack devServer to show errors straight in your web browser on an overlay popup whenever something wrong occurs;</p><p><br></p><p>devServer: {</p><p>\t<span style=\"color: rgb(124, 166, 104);\">// ...</span></p><p>\t<strong>overlay: </strong><strong style=\"color: rgb(86, 156, 214);\">true</strong></p><p>}</p>"
    },
    {
        "word": "<p>“node_modules/jquery/”.</p><p>package.json --&gt; main key to tell what's the entry of the package.</p>",
        "tran": "<p>webpack, whatever you import in one file won’t be accessible by another one. Each file is encapsulated and closed on its own.</p>"
    },
    {
        "word": "<p>when jquery is import by multiple files,the webpack only include it onces in your code.</p>",
        "tran": ""
    },
    {
        "word": "<p>Using Bootstrap with Webpack</p><p><br></p><p>$ npm install bootstrap</p><p><br></p><p>// import ...</p><p>import 'bootstrap/dist/css/bootstrap.css';</p><p><br></p><p>&lt;p&gt;Lorem ipsum...&lt;/p&gt;</p><p>&lt;a href=\"#\" class=\"btn btn-primary\"&gt;button&lt;/a&gt;</p>",
        "tran": "<p><br></p><p>import bootstrap from 'bootstrap' <strong>// It's wrong</strong></p><p><br></p><p>import 'bootstrap'; <strong>// It's the right</strong></p><p>Do you see the difference? The reason is that Bootstrap JS is a jquery plugin, and jQuery plugins just add functionalities to jQuery, which means they don’t return anything for us but just extend jQuery’s prototype, so no need to import the library in a variable.</p><p><br></p><p>Finally usage:</p><p>import $ from 'jquery'</p><p>// ...</p><p>import 'bootstrap';</p>"
    },
    {
        "word": "<p>Webpack ProvidePlugin</p><p>There is a helpful plugin that will help us to make jQuery available in all our project source files called the providePlugin.</p>",
        "tran": "<p>Usage of Webpack Provide Plugin</p><p><span style=\"color: rgb(124, 166, 104);\">// ...</span></p><p><span style=\"color: rgb(124, 166, 104);\">// make sure you require “webpack”</span></p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">webpack</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">require</span>(<span style=\"color: rgb(206, 145, 120);\">'webpack'</span>);</p><p><span style=\"color: rgb(78, 201, 176);\">module</span>.<span style=\"color: rgb(78, 201, 176);\">exports</span> <span style=\"color: rgb(212, 212, 212);\">=</span> {</p><p>\t<span style=\"color: rgb(124, 166, 104);\">// ...</span></p><p>\t<span style=\"color: rgb(156, 220, 254);\">plugins:</span> [</p><p><strong>\t\t</strong><strong style=\"color: rgb(86, 156, 214);\">new</strong><strong> </strong><strong style=\"color: rgb(156, 220, 254);\">webpack</strong><strong>.</strong><strong style=\"color: rgb(220, 220, 170);\">ProvidePlugin</strong><strong>({</strong></p><p><strong>\t\t\t</strong><strong style=\"color: rgb(156, 220, 254);\">$:</strong><strong> </strong><strong style=\"color: rgb(206, 145, 120);\">'jquery'</strong><strong>,</strong></p><p><strong>\t\t\t</strong><strong style=\"color: rgb(156, 220, 254);\">jQuery:</strong><strong> </strong><strong style=\"color: rgb(206, 145, 120);\">'jquery'</strong></p><p><strong>\t\t}),</strong></p><p>\t\t<span style=\"color: rgb(124, 166, 104);\">// ...</span></p><p>\t]</p><p>\t<span style=\"color: rgb(124, 166, 104);\">// ...</span></p><p>}</p><p><br></p><p>After use ProvidePlugin,whenever there is a module that uses $ or jQuery variables, a code like the following will be added to that module file:</p><p><span style=\"color: rgb(86, 156, 214);\">const</span> <span style=\"color: rgb(156, 220, 254);\">$</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(156, 220, 254);\">jQuery</span> <span style=\"color: rgb(212, 212, 212);\">=</span> <span style=\"color: rgb(220, 220, 170);\">require</span>(<span style=\"color: rgb(206, 145, 120);\">'jquery'</span>);</p><p><br></p><p>Or use like this</p><p><span style=\"color: rgb(86, 156, 214);\">new</span> <span style=\"color: rgb(156, 220, 254);\">webpack</span>.<span style=\"color: rgb(220, 220, 170);\">ProvidePlugin</span>({</p><p>\t<span style=\"color: rgb(124, 166, 104);\">// ...</span></p><p>\t<span style=\"color: rgb(206, 145, 120);\">\"window.jQuery\"</span><span style=\"color: rgb(156, 220, 254);\">:</span> <span style=\"color: rgb(206, 145, 120);\">\"jquery'\"</span>,</p><p>\t<span style=\"color: rgb(206, 145, 120);\">\"window.$\"</span><span style=\"color: rgb(156, 220, 254);\">:</span> <span style=\"color: rgb(206, 145, 120);\">\"jquery\"</span></p><p>})</p>"
    },
    {
        "word": "<p>src/application.scss</p><p>@import '~bootstrap/dist/css/bootstrap.css';</p><p>@import './another_css_file1.css';</p><p>@import './another_css_file2.css';</p><ul><li>The first thing is that the “import” keyword is preceded with an @, which is the standard way of importing CSS files in a SCSS file.</li><li>The second thing is the tilde ∼ before the word “bootstrap”; the reason for it is to tell webpack that we are importing a CSS located in node_modules.</li></ul>",
        "tran": ""
    },
    {
        "word": "<p>Installing jQuery-UI</p><p><br></p><p>$ npm install jquery-ui</p><p><br></p><p>// ...</p><p>import 'bootstrap';</p><p>import 'jquery-ui';<strong>// to make sure import 'jquery-ui' before importing any of the widgets</strong></p><p>import 'jquery-ui/ui/widgets/datepicker';<strong>// use the datapicker in jquery-ui</strong></p><p>import 'jquery-ui/ui/widgets/draggable';<strong>// use the draggable in jquery-ui</strong></p><p>import 'jquery-ui/ui/widgets/droppable';<strong>// use the droppable in jquery-ui</strong></p>",
        "tran": "<p><br></p><p>import the theme</p><p>@import '~jquery-ui/themes/base/all.css';</p><p>@import '~bootstrap/dist/css/bootstrap.css';</p><p><strong>@import '~jquery-ui/themes/base/datepicker.css';</strong></p><p><strong>@import '~jquery-ui/themes/base/theme.css';</strong></p><p>// ...</p><p><br></p><p><br></p>"
    },
    {
        "word": "<p>Lazy Loading</p><p>To lazy load the ckeditor</p><p><br></p><p>if (document.getElementById('ckeditor')) {</p><p>&nbsp;&nbsp;import('@ckeditor/ckeditor5-</p><p>build - classic').then(function(ClassicEditor){</p><p>ClassicEditor.default</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.create(document.querySelector('#ckeditor'))</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.then(editor =&gt; {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(editor);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.catch(error =&gt; {</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(error);</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</p><p>});</p><p>}</p><p><br></p><p>Make sure to use the property “default” on the passed argument (ClassicEditor) because this is how we get access to the imported module object when the promise is resolved.</p>",
        "tran": ""
    }
]